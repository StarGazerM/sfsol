DIGEST 0593ad1baabf5d1620c1a1f66fe84c1d
FEquiv
R40:42 Imp <> <> lib
def 57:62 <> aequiv
R73:76 Imp <> aexp ind
R102:106 Imp <> state def
R125:127 Coq.Init.Logic <> :type_scope:x_'='_x not
R114:118 Imp <> aeval def
R123:124 Equiv <> a1 var
R120:121 Equiv <> st var
R128:132 Imp <> aeval def
R137:138 Equiv <> a2 var
R134:135 Equiv <> st var
def 153:158 <> bequiv
R169:172 Imp <> bexp ind
R198:202 Imp <> state def
R221:223 Coq.Init.Logic <> :type_scope:x_'='_x not
R210:214 Imp <> beval def
R219:220 Equiv <> b1 var
R216:217 Equiv <> st var
R224:228 Imp <> beval def
R233:234 Equiv <> b2 var
R230:231 Equiv <> st var
def 249:254 <> cequiv
R265:267 Imp <> com ind
R299:303 Imp <> state def
R311:311 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R326:332 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R347:347 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R314:316 Imp <> ::x_'/'_x_'||'_x not
R319:322 Imp <> ::x_'/'_x_'||'_x not
R312:313 Equiv <> c1 var
R317:318 Equiv <> st var
R323:325 Equiv <> st' var
R335:337 Imp <> ::x_'/'_x_'||'_x not
R340:343 Imp <> ::x_'/'_x_'||'_x not
R333:334 Equiv <> c2 var
R338:339 Equiv <> st var
R344:346 Equiv <> st' var
prf 392:405 <> aequiv_example
R410:415 Equiv <> aequiv def
R443:446 Imp <> ANum constr
R418:423 Imp <> AMinus constr
R434:436 Imp <> AId constr
R438:438 Imp <> X def
R426:428 Imp <> AId constr
R430:430 Imp <> X def
R468:473 Equiv <> aequiv def
R495:499 Imp <> aeval def
R518:518 Imp <> X def
R518:518 Imp <> X def
prf 578:591 <> bequiv_example
R596:601 Equiv <> bequiv def
R643:647 Imp <> BTrue constr
R604:606 Imp <> BEq constr
R634:637 Imp <> ANum constr
R609:614 Imp <> AMinus constr
R625:627 Imp <> AId constr
R629:629 Imp <> X def
R617:619 Imp <> AId constr
R621:621 Imp <> X def
R666:671 Equiv <> bequiv def
R693:697 Imp <> beval def
R713:726 Equiv <> aequiv_example thm
R713:726 Equiv <> aequiv_example thm
prf 758:766 <> skip_left
R781:786 Equiv <> cequiv def
R809:809 Equiv <> c var
R798:800 Imp <> ::x_';;'_x not
R794:797 Imp <> ::'SKIP' not
R801:801 Equiv <> c var
R982:986 Imp <> E_Seq constr
R982:986 Imp <> E_Seq constr
R1007:1012 Imp <> E_Skip constr
R1007:1012 Imp <> E_Skip constr
prf 1045:1054 <> skip_right
R1069:1074 Equiv <> cequiv def
R1095:1095 Equiv <> c var
R1082:1084 Imp <> ::x_';;'_x not
R1081:1081 Equiv <> c var
R1085:1088 Imp <> ::'SKIP' not
R1210:1214 Imp <> E_Seq constr
R1210:1214 Imp <> E_Seq constr
R1242:1247 Imp <> E_Skip constr
R1242:1247 Imp <> E_Skip constr
prf 1268:1282 <> IFB_true_simple
R1301:1306 Equiv <> cequiv def
R1347:1348 Equiv <> c1 var
R1313:1316 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R1322:1327 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R1330:1335 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R1338:1340 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R1317:1321 Imp <> BTrue constr
R1328:1329 Equiv <> c1 var
R1336:1337 Equiv <> c2 var
R1451:1458 Imp <> E_IfTrue constr
R1451:1458 Imp <> E_IfTrue constr
prf 1483:1490 <> IFB_true
R1537:1542 Equiv <> cequiv def
R1585:1586 Equiv <> c1 var
R1552:1555 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R1557:1562 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R1565:1570 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R1573:1575 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R1556:1556 Equiv <> b var
R1563:1564 Equiv <> c1 var
R1571:1572 Equiv <> c2 var
R1514:1519 Equiv <> bequiv def
R1523:1527 Imp <> BTrue constr
R1521:1521 Equiv <> b var
R1841:1848 Imp <> E_IfTrue constr
R1841:1848 Imp <> E_IfTrue constr
prf 1910:1918 <> IFB_false
R1960:1965 Equiv <> cequiv def
R2002:2003 Equiv <> c2 var
R1972:1975 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R1977:1982 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R1985:1990 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R1993:1995 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R1976:1976 Equiv <> b var
R1983:1984 Equiv <> c1 var
R1991:1992 Equiv <> c2 var
R1939:1944 Equiv <> bequiv def
R1948:1953 Imp <> BFalse constr
R1946:1946 Equiv <> b var
R2131:2139 Imp <> E_IfFalse constr
R2131:2139 Imp <> E_IfFalse constr
prf 2180:2195 <> swap_if_branches
R2216:2221 Equiv <> cequiv def
R2259:2262 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R2269:2274 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R2277:2282 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R2285:2287 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R2263:2266 Imp <> BNot constr
R2268:2268 Equiv <> b var
R2275:2276 Equiv <> e2 var
R2283:2284 Equiv <> e1 var
R2228:2231 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R2233:2238 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R2241:2246 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R2249:2251 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R2232:2232 Equiv <> b var
R2239:2240 Equiv <> e1 var
R2247:2248 Equiv <> e2 var
R2363:2371 Imp <> E_IfFalse constr
R2363:2371 Imp <> E_IfFalse constr
R2417:2424 Imp <> E_IfTrue constr
R2417:2424 Imp <> E_IfTrue constr
R2470:2478 Imp <> E_IfFalse constr
R2505:2509 Imp <> beval def
R2470:2478 Imp <> E_IfFalse constr
R2505:2509 Imp <> beval def
R2505:2509 Imp <> beval def
R2548:2555 Imp <> E_IfTrue constr
R2582:2586 Imp <> beval def
R2548:2555 Imp <> E_IfTrue constr
R2582:2586 Imp <> beval def
R2582:2586 Imp <> beval def
prf 2631:2641 <> WHILE_false
R2686:2691 Equiv <> cequiv def
R2726:2729 Imp <> ::'SKIP' not
R2701:2706 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R2708:2711 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R2713:2716 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R2707:2707 Equiv <> b var
R2712:2712 Equiv <> c var
R2662:2667 Equiv <> bequiv def
R2671:2676 Imp <> BFalse constr
R2669:2669 Equiv <> b var
R2814:2819 Imp <> E_Skip constr
R2814:2819 Imp <> E_Skip constr
R2814:2819 Imp <> E_Skip constr
R2875:2884 Imp <> E_WhileEnd constr
R2875:2884 Imp <> E_WhileEnd constr
prf 2919:2936 <> WHILE_true_nonterm
R2987:2989 Coq.Init.Logic <> :type_scope:'~'_x not
R3020:3021 Coq.Init.Logic <> :type_scope:'~'_x not
R2990:2990 Imp <> ::x_'/'_x_'||'_x not
R3007:3010 Imp <> ::x_'/'_x_'||'_x not
R3013:3016 Imp <> ::x_'/'_x_'||'_x not
R2991:2996 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R2998:3001 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3003:3006 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R2997:2997 Equiv <> b var
R3002:3002 Equiv <> c var
R3011:3012 Equiv <> st var
R3017:3019 Equiv <> st' var
R2964:2969 Equiv <> bequiv def
R2973:2977 Imp <> BTrue constr
R2971:2971 Equiv <> b var
R3103:3108 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3110:3113 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3115:3118 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3103:3108 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3110:3113 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3115:3118 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3430:3435 Equiv <> bequiv def
prf 3637:3646 <> WHILE_true
R3689:3694 Equiv <> cequiv def
R3730:3735 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3741:3744 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3749:3752 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3736:3740 Imp <> BTrue constr
R3745:3748 Imp <> ::'SKIP' not
R3704:3709 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3711:3714 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3716:3719 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3710:3710 Equiv <> b var
R3715:3715 Equiv <> c var
R3666:3671 Equiv <> bequiv def
R3675:3679 Imp <> BTrue constr
R3673:3673 Equiv <> b var
R3812:3812 Coq.Init.Logic <> :type_scope:'~'_x not
R3813:3813 Imp <> ::x_'/'_x_'||'_x not
R3830:3833 Imp <> ::x_'/'_x_'||'_x not
R3836:3839 Imp <> ::x_'/'_x_'||'_x not
R3814:3819 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3821:3824 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3826:3829 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3812:3812 Coq.Init.Logic <> :type_scope:'~'_x not
R3813:3813 Imp <> ::x_'/'_x_'||'_x not
R3830:3833 Imp <> ::x_'/'_x_'||'_x not
R3836:3839 Imp <> ::x_'/'_x_'||'_x not
R3814:3819 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3821:3824 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3826:3829 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3856:3873 Equiv <> WHILE_true_nonterm thm
R3856:3873 Equiv <> WHILE_true_nonterm thm
R3924:3924 Coq.Init.Logic <> :type_scope:'~'_x not
R3925:3925 Imp <> ::x_'/'_x_'||'_x not
R3949:3952 Imp <> ::x_'/'_x_'||'_x not
R3955:3958 Imp <> ::x_'/'_x_'||'_x not
R3926:3931 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3937:3940 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3945:3948 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3932:3936 Imp <> BTrue constr
R3941:3944 Imp <> ::'SKIP' not
R3924:3924 Coq.Init.Logic <> :type_scope:'~'_x not
R3925:3925 Imp <> ::x_'/'_x_'||'_x not
R3949:3952 Imp <> ::x_'/'_x_'||'_x not
R3955:3958 Imp <> ::x_'/'_x_'||'_x not
R3926:3931 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3937:3940 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3945:3948 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R3932:3936 Imp <> BTrue constr
R3941:3944 Imp <> ::'SKIP' not
R3975:3983 Imp <> loop_stop thm
R3975:3983 Imp <> loop_stop thm
prf 4040:4053 <> loop_unrolling
R4070:4075 Equiv <> cequiv def
R4105:4108 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4110:4116 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4137:4143 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4148:4150 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4109:4109 Equiv <> b var
R4118:4120 Imp <> ::x_';;'_x not
R4117:4117 Equiv <> c var
R4121:4126 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4128:4131 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4133:4136 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4127:4127 Equiv <> b var
R4132:4132 Equiv <> c var
R4144:4147 Imp <> ::'SKIP' not
R4082:4087 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4089:4092 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4094:4097 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4088:4088 Equiv <> b var
R4093:4093 Equiv <> c var
R4233:4241 Imp <> E_IfFalse constr
R4260:4265 Imp <> E_Skip constr
R4233:4241 Imp <> E_IfFalse constr
R4260:4265 Imp <> E_Skip constr
R4278:4285 Imp <> E_IfTrue constr
R4304:4308 Imp <> E_Seq constr
R4278:4285 Imp <> E_IfTrue constr
R4304:4308 Imp <> E_Seq constr
R4380:4390 Imp <> E_WhileLoop constr
R4380:4390 Imp <> E_WhileLoop constr
R4419:4428 Imp <> E_WhileEnd constr
R4419:4428 Imp <> E_WhileEnd constr
prf 4453:4461 <> seq_assoc
R4484:4489 Equiv <> cequiv def
R4509:4511 Imp <> ::x_';;'_x not
R4518:4518 Imp <> ::x_';;'_x not
R4507:4508 Equiv <> c1 var
R4514:4515 Imp <> ::x_';;'_x not
R4512:4513 Equiv <> c2 var
R4516:4517 Equiv <> c3 var
R4492:4492 Imp <> ::x_';;'_x not
R4499:4501 Imp <> ::x_';;'_x not
R4495:4496 Imp <> ::x_';;'_x not
R4493:4494 Equiv <> c1 var
R4497:4498 Equiv <> c2 var
R4502:4503 Equiv <> c3 var
R4625:4629 Imp <> E_Seq constr
R4625:4629 Imp <> E_Seq constr
R4658:4662 Imp <> E_Seq constr
R4658:4662 Imp <> E_Seq constr
R4734:4738 Imp <> E_Seq constr
R4734:4738 Imp <> E_Seq constr
R4767:4771 Imp <> E_Seq constr
R4767:4771 Imp <> E_Seq constr
ax 4804:4828 <> functional_extensionality
R4863:4863 Equiv <> Y var
R4858:4858 Equiv <> X var
R4902:4904 Coq.Init.Logic <> :type_scope:x_'='_x not
R4901:4901 Equiv <> f var
R4905:4905 Equiv <> g var
R4883:4883 Equiv <> X var
R4890:4892 Coq.Init.Logic <> :type_scope:x_'='_x not
R4887:4887 Equiv <> f var
R4889:4889 Equiv <> x var
R4893:4893 Equiv <> g var
R4895:4895 Equiv <> x var
prf 4917:4935 <> identity_assignment
R4949:4950 SfLib <> id ind
R4956:4961 Equiv <> cequiv def
R4985:4988 Imp <> ::'SKIP' not
R4969:4973 Imp <> ::x_'::='_x not
R4968:4968 Equiv <> X var
R4974:4976 Imp <> AId constr
R4978:4978 Equiv <> X var
R5091:5096 Imp <> update def
R5091:5096 Imp <> update def
R5153:5177 Equiv <> functional_extensionality prfax
R5153:5177 Equiv <> functional_extensionality prfax
R5202:5212 Imp <> update_same thm
R5202:5212 Imp <> update_same thm
R5289:5292 Coq.Init.Logic <> :type_scope:x_'='_x not
R5313:5313 Coq.Init.Logic <> :type_scope:x_'='_x not
R5293:5298 Imp <> update def
R5289:5292 Coq.Init.Logic <> :type_scope:x_'='_x not
R5313:5313 Coq.Init.Logic <> :type_scope:x_'='_x not
R5293:5298 Imp <> update def
R5333:5357 Equiv <> functional_extensionality prfax
R5333:5357 Equiv <> functional_extensionality prfax
R5385:5395 Imp <> update_same thm
R5385:5395 Imp <> update_same thm
prf 5482:5494 <> assign_aequiv
R5534:5539 Equiv <> cequiv def
R5548:5552 Imp <> ::x_'::='_x not
R5547:5547 Equiv <> X var
R5553:5553 Equiv <> e var
R5541:5544 Imp <> ::'SKIP' not
R5512:5517 Equiv <> aequiv def
R5527:5527 Equiv <> e var
R5520:5522 Imp <> AId constr
R5524:5524 Equiv <> X var
R5633:5633 Imp <> ::x_'/'_x_'||'_x not
R5641:5644 Imp <> ::x_'/'_x_'||'_x not
R5648:5651 Imp <> ::x_'/'_x_'||'_x not
R5635:5639 Imp <> ::x_'::='_x not
R5663:5663 Imp <> ::x_'/'_x_'||'_x not
R5671:5674 Imp <> ::x_'/'_x_'||'_x not
R5678:5681 Imp <> ::x_'/'_x_'||'_x not
R5665:5669 Imp <> ::x_'::='_x not
R5682:5687 Imp <> update def
R5696:5700 Imp <> aeval def
R5663:5663 Imp <> ::x_'/'_x_'||'_x not
R5671:5674 Imp <> ::x_'/'_x_'||'_x not
R5678:5681 Imp <> ::x_'/'_x_'||'_x not
R5665:5669 Imp <> ::x_'::='_x not
R5682:5687 Imp <> update def
R5696:5700 Imp <> aeval def
R5633:5633 Imp <> ::x_'/'_x_'||'_x not
R5641:5644 Imp <> ::x_'/'_x_'||'_x not
R5648:5651 Imp <> ::x_'/'_x_'||'_x not
R5635:5639 Imp <> ::x_'::='_x not
R5747:5752 Imp <> update def
R5761:5765 Imp <> aeval def
R5747:5752 Imp <> update def
R5761:5765 Imp <> aeval def
R5801:5825 Equiv <> functional_extensionality prfax
R5801:5825 Equiv <> functional_extensionality prfax
R5847:5857 Imp <> update_same thm
R5847:5857 Imp <> update_same thm
R5909:5914 Imp <> update def
R5922:5926 Imp <> aeval def
R5909:5914 Imp <> update def
R5922:5926 Imp <> aeval def
R5971:5995 Equiv <> functional_extensionality prfax
R5971:5995 Equiv <> functional_extensionality prfax
R6017:6027 Imp <> update_same thm
R6017:6027 Imp <> update_same thm
prf 6064:6074 <> refl_aequiv
R6090:6093 Imp <> aexp ind
R6097:6102 Equiv <> aequiv def
R6106:6106 Equiv <> a var
R6104:6104 Equiv <> a var
prf 6149:6158 <> sym_aequiv
R6178:6181 Imp <> aexp ind
R6203:6208 Equiv <> aequiv def
R6213:6214 Equiv <> a1 var
R6210:6211 Equiv <> a2 var
R6187:6192 Equiv <> aequiv def
R6197:6198 Equiv <> a2 var
R6194:6195 Equiv <> a1 var
prf 6276:6287 <> trans_aequiv
R6310:6313 Imp <> aexp ind
R6351:6356 Equiv <> aequiv def
R6361:6362 Equiv <> a3 var
R6358:6359 Equiv <> a1 var
R6335:6340 Equiv <> aequiv def
R6345:6346 Equiv <> a3 var
R6342:6343 Equiv <> a2 var
R6319:6324 Equiv <> aequiv def
R6329:6330 Equiv <> a2 var
R6326:6327 Equiv <> a1 var
prf 6430:6440 <> refl_bequiv
R6456:6459 Imp <> bexp ind
R6463:6468 Equiv <> bequiv def
R6472:6472 Equiv <> b var
R6470:6470 Equiv <> b var
prf 6515:6524 <> sym_bequiv
R6544:6547 Imp <> bexp ind
R6569:6574 Equiv <> bequiv def
R6579:6580 Equiv <> b1 var
R6576:6577 Equiv <> b2 var
R6553:6558 Equiv <> bequiv def
R6563:6564 Equiv <> b2 var
R6560:6561 Equiv <> b1 var
prf 6629:6640 <> trans_bequiv
R6663:6666 Imp <> bexp ind
R6704:6709 Equiv <> bequiv def
R6714:6715 Equiv <> b3 var
R6711:6712 Equiv <> b1 var
R6688:6693 Equiv <> bequiv def
R6698:6699 Equiv <> b3 var
R6695:6696 Equiv <> b2 var
R6672:6677 Equiv <> bequiv def
R6682:6683 Equiv <> b2 var
R6679:6680 Equiv <> b1 var
prf 6783:6793 <> refl_cequiv
R6809:6811 Imp <> com ind
R6815:6820 Equiv <> cequiv def
R6824:6824 Equiv <> c var
R6822:6822 Equiv <> c var
prf 6884:6893 <> sym_cequiv
R6913:6915 Imp <> com ind
R6937:6942 Equiv <> cequiv def
R6947:6948 Equiv <> c1 var
R6944:6945 Equiv <> c2 var
R6921:6926 Equiv <> cequiv def
R6931:6932 Equiv <> c2 var
R6928:6929 Equiv <> c1 var
prf 7007:7015 <> iff_trans
R7080:7084 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R7078:7079 Equiv <> P1 var
R7085:7086 Equiv <> P3 var
R7065:7069 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R7063:7064 Equiv <> P2 var
R7070:7071 Equiv <> P3 var
R7050:7054 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R7048:7049 Equiv <> P1 var
R7055:7056 Equiv <> P2 var
prf 7200:7211 <> trans_cequiv
R7234:7236 Imp <> com ind
R7274:7279 Equiv <> cequiv def
R7284:7285 Equiv <> c3 var
R7281:7282 Equiv <> c1 var
R7258:7263 Equiv <> cequiv def
R7268:7269 Equiv <> c3 var
R7265:7266 Equiv <> c2 var
R7242:7247 Equiv <> cequiv def
R7252:7253 Equiv <> c2 var
R7249:7250 Equiv <> c1 var
prf 7418:7432 <> CAss_congruence
R7474:7479 Equiv <> cequiv def
R7494:7497 Imp <> CAss constr
R7501:7503 Equiv <> a1' var
R7499:7499 Equiv <> i var
R7482:7485 Imp <> CAss constr
R7489:7490 Equiv <> a1 var
R7487:7487 Equiv <> i var
R7455:7460 Equiv <> aequiv def
R7465:7467 Equiv <> a1' var
R7462:7463 Equiv <> a1 var
R7567:7571 Imp <> E_Ass constr
R7567:7571 Imp <> E_Ass constr
R7567:7571 Imp <> E_Ass constr
prf 7607:7623 <> CWhile_congruence
R7687:7692 Equiv <> cequiv def
R7716:7721 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R7725:7728 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R7732:7735 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R7722:7724 Equiv <> b1' var
R7729:7731 Equiv <> c1' var
R7695:7700 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R7703:7706 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R7709:7712 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R7701:7702 Equiv <> b1 var
R7707:7708 Equiv <> c1 var
R7668:7673 Equiv <> cequiv def
R7678:7680 Equiv <> c1' var
R7675:7676 Equiv <> c1 var
R7651:7656 Equiv <> bequiv def
R7661:7663 Equiv <> b1' var
R7658:7659 Equiv <> b1 var
R7779:7784 Equiv <> bequiv def
R7786:7791 Equiv <> cequiv def
R7883:7888 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R7891:7894 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R7897:7900 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R7883:7888 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R7891:7894 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R7897:7900 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R8011:8020 Imp <> E_WhileEnd constr
R8011:8020 Imp <> E_WhileEnd constr
R8086:8096 Imp <> E_WhileLoop constr
R8086:8096 Imp <> E_WhileLoop constr
R8350:8355 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R8359:8362 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R8366:8369 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R8350:8355 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R8359:8362 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R8366:8369 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R8483:8492 Imp <> E_WhileEnd constr
R8483:8492 Imp <> E_WhileEnd constr
R8558:8568 Imp <> E_WhileLoop constr
R8558:8568 Imp <> E_WhileLoop constr
prf 8809:8823 <> CSeq_congruence
R8887:8892 Equiv <> cequiv def
R8907:8908 Imp <> ::x_';;'_x not
R8904:8906 Equiv <> c1' var
R8909:8911 Equiv <> c2' var
R8897:8898 Imp <> ::x_';;'_x not
R8895:8896 Equiv <> c1 var
R8899:8900 Equiv <> c2 var
R8868:8873 Equiv <> cequiv def
R8878:8880 Equiv <> c2' var
R8875:8876 Equiv <> c2 var
R8851:8856 Equiv <> cequiv def
R8861:8863 Equiv <> c1' var
R8858:8859 Equiv <> c1 var
R9006:9010 Imp <> E_Seq constr
R9006:9010 Imp <> E_Seq constr
R9006:9010 Imp <> E_Seq constr
prf 9073:9086 <> CIf_congruence
R9170:9175 Equiv <> cequiv def
R9205:9208 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9211:9216 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9220:9225 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9229:9231 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9209:9210 Equiv <> b' var
R9217:9219 Equiv <> c1' var
R9226:9228 Equiv <> c2' var
R9178:9181 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9183:9188 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9191:9196 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9199:9201 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9182:9182 Equiv <> b var
R9189:9190 Equiv <> c1 var
R9197:9198 Equiv <> c2 var
R9151:9156 Equiv <> cequiv def
R9161:9163 Equiv <> c2' var
R9158:9159 Equiv <> c2 var
R9134:9139 Equiv <> cequiv def
R9144:9146 Equiv <> c1' var
R9141:9142 Equiv <> c1 var
R9119:9124 Equiv <> bequiv def
R9128:9129 Equiv <> b' var
R9126:9126 Equiv <> b var
R9320:9327 Imp <> E_IfTrue constr
R9320:9327 Imp <> E_IfTrue constr
R9377:9385 Imp <> E_IfFalse constr
R9377:9385 Imp <> E_IfFalse constr
R9438:9445 Imp <> E_IfTrue constr
R9438:9445 Imp <> E_IfTrue constr
R9498:9506 Imp <> E_IfFalse constr
R9498:9506 Imp <> E_IfFalse constr
def 9547:9564 <> congruence_example
R9569:9574 Equiv <> cequiv def
R9757:9764 Imp <> ::x_';;'_x not
R9746:9750 Imp <> ::x_'::='_x not
R9745:9745 Imp <> X def
R9751:9754 Imp <> ANum constr
R9765:9769 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9790:9808 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9837:9878 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9892:9899 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9770:9772 Imp <> BEq constr
R9783:9786 Imp <> ANum constr
R9775:9777 Imp <> AId constr
R9779:9779 Imp <> X def
R9810:9814 Imp <> ::x_'::='_x not
R9809:9809 Imp <> Y def
R9815:9820 Imp <> AMinus constr
R9831:9833 Imp <> AId constr
R9835:9835 Imp <> X def
R9823:9825 Imp <> AId constr
R9827:9827 Imp <> X def
R9880:9884 Imp <> ::x_'::='_x not
R9879:9879 Imp <> Y def
R9885:9888 Imp <> ANum constr
R9614:9621 Imp <> ::x_';;'_x not
R9603:9607 Imp <> ::x_'::='_x not
R9602:9602 Imp <> X def
R9608:9611 Imp <> ANum constr
R9622:9626 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9647:9665 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9678:9695 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9709:9716 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9627:9629 Imp <> BEq constr
R9640:9643 Imp <> ANum constr
R9632:9634 Imp <> AId constr
R9636:9636 Imp <> X def
R9667:9671 Imp <> ::x_'::='_x not
R9666:9666 Imp <> Y def
R9672:9675 Imp <> ANum constr
R9697:9701 Imp <> ::x_'::='_x not
R9696:9696 Imp <> Y def
R9702:9705 Imp <> ANum constr
R9918:9932 Equiv <> CSeq_congruence thm
R9918:9932 Equiv <> CSeq_congruence thm
R9945:9955 Equiv <> refl_cequiv thm
R9945:9955 Equiv <> refl_cequiv thm
R9968:9981 Equiv <> CIf_congruence thm
R9968:9981 Equiv <> CIf_congruence thm
R9996:10006 Equiv <> refl_bequiv thm
R9996:10006 Equiv <> refl_bequiv thm
R10021:10035 Equiv <> CAss_congruence thm
R10021:10035 Equiv <> CAss_congruence thm
R10045:10050 Equiv <> aequiv def
R10084:10093 Coq.Arith.Minus <> minus_diag thm
R10084:10093 Coq.Arith.Minus <> minus_diag thm
R10108:10118 Equiv <> refl_cequiv thm
R10108:10118 Equiv <> refl_cequiv thm
def 10138:10149 <> atrans_sound
R10169:10172 Imp <> aexp ind
R10161:10164 Imp <> aexp ind
R10199:10202 Imp <> aexp ind
R10210:10215 Equiv <> aequiv def
R10220:10225 Equiv <> atrans var
R10227:10227 Equiv <> a var
R10217:10217 Equiv <> a var
def 10243:10254 <> btrans_sound
R10274:10277 Imp <> bexp ind
R10266:10269 Imp <> bexp ind
R10304:10307 Imp <> bexp ind
R10315:10320 Equiv <> bequiv def
R10325:10330 Equiv <> btrans var
R10332:10332 Equiv <> b var
R10322:10322 Equiv <> b var
def 10348:10359 <> ctrans_sound
R10378:10380 Imp <> com ind
R10371:10373 Imp <> com ind
R10407:10409 Imp <> com ind
R10417:10422 Equiv <> cequiv def
R10427:10432 Equiv <> ctrans var
R10434:10434 Equiv <> c var
R10424:10424 Equiv <> c var
def 10448:10466 <> fold_constants_aexp
R10473:10476 Imp <> aexp ind
R10481:10484 Imp <> aexp ind
R10497:10497 Equiv <> a var
R10508:10511 Imp <> ANum constr
R10518:10521 Imp <> ANum constr
R10529:10531 Imp <> AId constr
R10538:10540 Imp <> AId constr
R10548:10552 Imp <> APlus constr
R10575:10575 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10598:10599 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10622:10622 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10576:10594 Equiv <> fold_constants_aexp def
R10600:10618 Equiv <> fold_constants_aexp def
R10637:10637 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10645:10646 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10654:10654 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10638:10641 Imp <> ANum constr
R10647:10650 Imp <> ANum constr
R10659:10662 Imp <> ANum constr
R10667:10669 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R10682:10682 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10686:10687 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10691:10691 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10696:10700 Imp <> APlus constr
R10724:10729 Imp <> AMinus constr
R10752:10752 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10775:10776 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10799:10799 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10753:10771 Equiv <> fold_constants_aexp def
R10777:10795 Equiv <> fold_constants_aexp def
R10814:10814 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10822:10823 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10831:10831 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10815:10818 Imp <> ANum constr
R10824:10827 Imp <> ANum constr
R10836:10839 Imp <> ANum constr
R10844:10846 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R10859:10859 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10863:10864 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10868:10868 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10873:10878 Imp <> AMinus constr
R10902:10906 Imp <> AMult constr
R10929:10929 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10952:10953 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10976:10976 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10930:10948 Equiv <> fold_constants_aexp def
R10954:10972 Equiv <> fold_constants_aexp def
R10991:10991 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10999:11000 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11008:11008 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R10992:10995 Imp <> ANum constr
R11001:11004 Imp <> ANum constr
R11013:11016 Imp <> ANum constr
R11021:11023 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R11036:11036 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11040:11041 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11045:11045 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11050:11054 Imp <> AMult constr
def 11090:11102 <> fold_aexp_ex1
R11177:11181 Coq.Init.Logic <> :type_scope:x_'='_x not
R11110:11128 Equiv <> fold_constants_aexp def
R11137:11141 Imp <> AMult constr
R11170:11172 Imp <> AId constr
R11174:11174 Imp <> X def
R11144:11148 Imp <> APlus constr
R11160:11163 Imp <> ANum constr
R11151:11154 Imp <> ANum constr
R11182:11186 Imp <> AMult constr
R11198:11200 Imp <> AId constr
R11202:11202 Imp <> X def
R11189:11192 Imp <> ANum constr
def 11240:11252 <> fold_aexp_ex2
R11344:11348 Coq.Init.Logic <> :type_scope:x_'='_x not
R11260:11278 Equiv <> fold_constants_aexp def
R11287:11292 Imp <> AMinus constr
R11303:11307 Imp <> APlus constr
R11336:11338 Imp <> AId constr
R11340:11340 Imp <> Y def
R11310:11314 Imp <> AMult constr
R11326:11329 Imp <> ANum constr
R11317:11320 Imp <> ANum constr
R11295:11297 Imp <> AId constr
R11299:11299 Imp <> X def
R11349:11354 Imp <> AMinus constr
R11365:11369 Imp <> APlus constr
R11381:11383 Imp <> AId constr
R11385:11385 Imp <> Y def
R11372:11375 Imp <> ANum constr
R11357:11359 Imp <> AId constr
R11361:11361 Imp <> X def
def 11425:11443 <> fold_constants_bexp
R11450:11453 Imp <> bexp ind
R11458:11461 Imp <> bexp ind
R11474:11474 Equiv <> b var
R11485:11489 Imp <> BTrue constr
R11494:11498 Imp <> BTrue constr
R11504:11509 Imp <> BFalse constr
R11514:11519 Imp <> BFalse constr
R11525:11527 Imp <> BEq constr
R11550:11550 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11573:11574 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11597:11597 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11551:11569 Equiv <> fold_constants_aexp def
R11575:11593 Equiv <> fold_constants_aexp def
R11612:11612 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11620:11621 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11629:11629 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11613:11616 Imp <> ANum constr
R11622:11625 Imp <> ANum constr
R11637:11643 Coq.Arith.EqNat <> beq_nat def
R11667:11672 Imp <> BFalse constr
R11656:11660 Imp <> BTrue constr
R11682:11682 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11686:11687 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11691:11691 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11696:11698 Imp <> BEq constr
R11722:11724 Imp <> BLe constr
R11747:11747 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11770:11771 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11794:11794 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11748:11766 Equiv <> fold_constants_aexp def
R11772:11790 Equiv <> fold_constants_aexp def
R11809:11809 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11817:11818 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11826:11826 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11810:11813 Imp <> ANum constr
R11819:11822 Imp <> ANum constr
R11834:11840 SfLib <> ble_nat def
R11864:11869 Imp <> BFalse constr
R11853:11857 Imp <> BTrue constr
R11879:11879 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11883:11884 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11888:11888 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R11893:11895 Imp <> BLe constr
R11919:11922 Imp <> BNot constr
R11943:11961 Equiv <> fold_constants_bexp def
R11980:11984 Imp <> BTrue constr
R11989:11994 Imp <> BFalse constr
R12004:12009 Imp <> BFalse constr
R12014:12018 Imp <> BTrue constr
R12035:12038 Imp <> BNot constr
R12058:12061 Imp <> BAnd constr
R12084:12084 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12107:12108 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12131:12131 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12085:12103 Equiv <> fold_constants_bexp def
R12109:12127 Equiv <> fold_constants_bexp def
R12146:12146 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12152:12153 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12159:12159 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12147:12151 Imp <> BTrue constr
R12154:12158 Imp <> BTrue constr
R12164:12168 Imp <> BTrue constr
R12178:12178 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12184:12185 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12192:12192 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12179:12183 Imp <> BTrue constr
R12186:12191 Imp <> BFalse constr
R12197:12202 Imp <> BFalse constr
R12212:12212 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12219:12220 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12226:12226 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12213:12218 Imp <> BFalse constr
R12221:12225 Imp <> BTrue constr
R12231:12236 Imp <> BFalse constr
R12246:12246 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12253:12254 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12261:12261 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12247:12252 Imp <> BFalse constr
R12255:12260 Imp <> BFalse constr
R12266:12271 Imp <> BFalse constr
R12281:12281 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12285:12286 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12290:12290 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R12295:12298 Imp <> BAnd constr
def 12334:12346 <> fold_bexp_ex1
R12413:12417 Coq.Init.Logic <> :type_scope:x_'='_x not
R12354:12372 Equiv <> fold_constants_bexp def
R12375:12378 Imp <> BAnd constr
R12387:12390 Imp <> BNot constr
R12393:12396 Imp <> BAnd constr
R12405:12409 Imp <> BTrue constr
R12398:12403 Imp <> BFalse constr
R12380:12384 Imp <> BTrue constr
R12418:12422 Imp <> BTrue constr
def 12459:12471 <> fold_bexp_ex2
R12621:12625 Coq.Init.Logic <> :type_scope:x_'='_x not
R12479:12497 Equiv <> fold_constants_bexp def
R12506:12509 Imp <> BAnd constr
R12546:12548 Imp <> BEq constr
R12577:12582 Imp <> AMinus constr
R12594:12598 Imp <> APlus constr
R12610:12613 Imp <> ANum constr
R12601:12604 Imp <> ANum constr
R12585:12588 Imp <> ANum constr
R12551:12554 Imp <> ANum constr
R12512:12514 Imp <> BEq constr
R12525:12527 Imp <> AId constr
R12529:12529 Imp <> Y def
R12517:12519 Imp <> AId constr
R12521:12521 Imp <> X def
R12626:12629 Imp <> BAnd constr
R12653:12657 Imp <> BTrue constr
R12632:12634 Imp <> BEq constr
R12645:12647 Imp <> AId constr
R12649:12649 Imp <> Y def
R12637:12639 Imp <> AId constr
R12641:12641 Imp <> X def
def 12695:12712 <> fold_constants_com
R12719:12721 Imp <> com ind
R12726:12728 Imp <> com ind
R12741:12741 Equiv <> c var
R12752:12755 Imp <> ::'SKIP' not
R12766:12769 Imp <> ::'SKIP' not
R12776:12780 Imp <> ::x_'::='_x not
R12792:12795 Imp <> CAss constr
R12800:12818 Equiv <> fold_constants_aexp def
R12829:12832 Imp <> ::x_';;'_x not
R12845:12845 Imp <> ::x_';;'_x not
R12867:12872 Imp <> ::x_';;'_x not
R12894:12894 Imp <> ::x_';;'_x not
R12846:12863 Equiv <> fold_constants_com def
R12873:12890 Equiv <> fold_constants_com def
R12900:12903 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12905:12910 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12913:12918 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12921:12923 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12940:12958 Equiv <> fold_constants_bexp def
R12975:12979 Imp <> BTrue constr
R12984:13001 Equiv <> fold_constants_com def
R13014:13019 Imp <> BFalse constr
R13024:13041 Equiv <> fold_constants_com def
R13060:13063 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13066:13071 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13093:13119 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13141:13143 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13072:13089 Equiv <> fold_constants_com def
R13120:13137 Equiv <> fold_constants_com def
R13159:13164 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13166:13169 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13171:13174 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13191:13209 Equiv <> fold_constants_bexp def
R13226:13230 Imp <> BTrue constr
R13235:13240 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13246:13249 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13254:13257 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13241:13245 Imp <> BTrue constr
R13250:13253 Imp <> ::'SKIP' not
R13267:13272 Imp <> BFalse constr
R13277:13280 Imp <> ::'SKIP' not
R13296:13301 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13304:13308 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13329:13333 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13309:13326 Equiv <> fold_constants_com def
R13328:13328 Equiv <> c var
def 13361:13372 <> fold_com_ex1
R13823:13862 Coq.Init.Logic <> :type_scope:x_'='_x not
R14120:14120 Coq.Init.Logic <> :type_scope:x_'='_x not
R13378:13395 Equiv <> fold_constants_com def
R13459:13466 Imp <> ::x_';;'_x not
R13431:13435 Imp <> ::x_'::='_x not
R13430:13430 Imp <> X def
R13436:13440 Imp <> APlus constr
R13452:13455 Imp <> ANum constr
R13443:13446 Imp <> ANum constr
R13496:13503 Imp <> ::x_';;'_x not
R13468:13472 Imp <> ::x_'::='_x not
R13467:13467 Imp <> Y def
R13473:13478 Imp <> AMinus constr
R13489:13492 Imp <> ANum constr
R13481:13483 Imp <> AId constr
R13485:13485 Imp <> X def
R13617:13624 Imp <> ::x_';;'_x not
R13504:13507 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13562:13574 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13579:13596 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13609:13616 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13508:13510 Imp <> BEq constr
R13538:13542 Imp <> APlus constr
R13554:13557 Imp <> ANum constr
R13545:13548 Imp <> ANum constr
R13513:13518 Imp <> AMinus constr
R13529:13531 Imp <> AId constr
R13533:13533 Imp <> Y def
R13521:13523 Imp <> AId constr
R13525:13525 Imp <> X def
R13575:13578 Imp <> ::'SKIP' not
R13598:13602 Imp <> ::x_'::='_x not
R13597:13597 Imp <> Y def
R13603:13606 Imp <> ANum constr
R13740:13747 Imp <> ::x_';;'_x not
R13625:13628 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13685:13697 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13710:13727 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13732:13739 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13629:13631 Imp <> BLe constr
R13643:13648 Imp <> AMinus constr
R13660:13664 Imp <> APlus constr
R13676:13679 Imp <> ANum constr
R13667:13670 Imp <> ANum constr
R13651:13654 Imp <> ANum constr
R13634:13637 Imp <> ANum constr
R13699:13703 Imp <> ::x_'::='_x not
R13698:13698 Imp <> Y def
R13704:13707 Imp <> ANum constr
R13728:13731 Imp <> ::'SKIP' not
R13748:13753 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13774:13784 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13813:13821 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13754:13756 Imp <> BEq constr
R13767:13770 Imp <> ANum constr
R13759:13761 Imp <> AId constr
R13763:13763 Imp <> Y def
R13786:13790 Imp <> ::x_'::='_x not
R13785:13785 Imp <> X def
R13791:13795 Imp <> APlus constr
R13806:13809 Imp <> ANum constr
R13798:13800 Imp <> AId constr
R13802:13802 Imp <> X def
R13875:13882 Imp <> ::x_';;'_x not
R13864:13868 Imp <> ::x_'::='_x not
R13863:13863 Imp <> X def
R13869:13872 Imp <> ANum constr
R13912:13919 Imp <> ::x_';;'_x not
R13884:13888 Imp <> ::x_'::='_x not
R13883:13883 Imp <> Y def
R13889:13894 Imp <> AMinus constr
R13905:13908 Imp <> ANum constr
R13897:13899 Imp <> AId constr
R13901:13901 Imp <> X def
R14018:14025 Imp <> ::x_';;'_x not
R13920:13923 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13961:13973 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13978:13996 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R14009:14017 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13924:13926 Imp <> BEq constr
R13954:13957 Imp <> ANum constr
R13929:13934 Imp <> AMinus constr
R13945:13947 Imp <> AId constr
R13949:13949 Imp <> Y def
R13937:13939 Imp <> AId constr
R13941:13941 Imp <> X def
R13974:13977 Imp <> ::'SKIP' not
R13998:14002 Imp <> ::x_'::='_x not
R13997:13997 Imp <> Y def
R14003:14006 Imp <> ANum constr
R14038:14045 Imp <> ::x_';;'_x not
R14027:14031 Imp <> ::x_'::='_x not
R14026:14026 Imp <> Y def
R14032:14035 Imp <> ANum constr
R14046:14051 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14072:14082 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14111:14119 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14052:14054 Imp <> BEq constr
R14065:14068 Imp <> ANum constr
R14057:14059 Imp <> AId constr
R14061:14061 Imp <> Y def
R14084:14088 Imp <> ::x_'::='_x not
R14083:14083 Imp <> X def
R14089:14093 Imp <> APlus constr
R14104:14107 Imp <> ANum constr
R14096:14098 Imp <> AId constr
R14100:14100 Imp <> X def
prf 14157:14181 <> fold_constants_aexp_sound
R14187:14198 Equiv <> atrans_sound def
R14200:14218 Equiv <> fold_constants_aexp def
R14287:14305 Equiv <> fold_constants_aexp def
R14347:14365 Equiv <> fold_constants_aexp def
R14287:14305 Equiv <> fold_constants_aexp def
R14287:14305 Equiv <> fold_constants_aexp def
R14287:14305 Equiv <> fold_constants_aexp def
R14347:14365 Equiv <> fold_constants_aexp def
R14347:14365 Equiv <> fold_constants_aexp def
R14347:14365 Equiv <> fold_constants_aexp def
R14347:14365 Equiv <> fold_constants_aexp def
R14347:14365 Equiv <> fold_constants_aexp def
R14347:14365 Equiv <> fold_constants_aexp def
R14347:14365 Equiv <> fold_constants_aexp def
R14347:14365 Equiv <> fold_constants_aexp def
R14347:14365 Equiv <> fold_constants_aexp def
R14347:14365 Equiv <> fold_constants_aexp def
R14347:14365 Equiv <> fold_constants_aexp def
R14347:14365 Equiv <> fold_constants_aexp def
R14347:14365 Equiv <> fold_constants_aexp def
R14347:14365 Equiv <> fold_constants_aexp def
R14347:14365 Equiv <> fold_constants_aexp def
prf 14445:14469 <> fold_constants_bexp_sound
R14474:14485 Equiv <> btrans_sound def
R14487:14505 Equiv <> fold_constants_bexp def
R14524:14535 Equiv <> btrans_sound def
R14555:14560 Equiv <> bequiv def
R15060:15078 Equiv <> fold_constants_aexp def
R15060:15078 Equiv <> fold_constants_aexp def
R15117:15135 Equiv <> fold_constants_aexp def
R15117:15135 Equiv <> fold_constants_aexp def
R15173:15177 Imp <> aeval def
R15192:15196 Imp <> aeval def
R15239:15263 Equiv <> fold_constants_aexp_sound thm
R15192:15196 Imp <> aeval def
R15173:15177 Imp <> aeval def
R15239:15263 Equiv <> fold_constants_aexp_sound thm
R15293:15297 Imp <> aeval def
R15312:15316 Imp <> aeval def
R15359:15383 Equiv <> fold_constants_aexp_sound thm
R15312:15316 Imp <> aeval def
R15293:15297 Imp <> aeval def
R15359:15383 Equiv <> fold_constants_aexp_sound thm
R15574:15580 Coq.Arith.EqNat <> beq_nat def
R15574:15580 Coq.Arith.EqNat <> beq_nat def
R15642:15666 Equiv <> fold_constants_aexp_sound thm
R15642:15666 Equiv <> fold_constants_aexp_sound thm
R15682:15686 Imp <> aeval def
R15701:15705 Imp <> aeval def
R15711:15729 Equiv <> fold_constants_aexp def
R15701:15705 Imp <> aeval def
R15711:15729 Equiv <> fold_constants_aexp def
R15682:15686 Imp <> aeval def
R15751:15769 Equiv <> fold_constants_aexp def
R15795:15813 Equiv <> fold_constants_aexp def
R15751:15769 Equiv <> fold_constants_aexp def
R15795:15813 Equiv <> fold_constants_aexp def
R15910:15916 SfLib <> ble_nat def
R15910:15916 SfLib <> ble_nat def
R15946:15970 Equiv <> fold_constants_aexp_sound thm
R15946:15970 Equiv <> fold_constants_aexp_sound thm
R16015:16033 Equiv <> fold_constants_bexp def
R16015:16033 Equiv <> fold_constants_bexp def
R16142:16160 Equiv <> fold_constants_bexp def
R16142:16160 Equiv <> fold_constants_bexp def
R16199:16217 Equiv <> fold_constants_bexp def
R16199:16217 Equiv <> fold_constants_bexp def
prf 16333:16356 <> fold_constants_com_sound
R16362:16373 Equiv <> ctrans_sound def
R16375:16392 Equiv <> fold_constants_com def
R16411:16422 Equiv <> ctrans_sound def
R16495:16505 Equiv <> refl_cequiv thm
R16495:16505 Equiv <> refl_cequiv thm
R16528:16542 Equiv <> CAss_congruence thm
R16528:16542 Equiv <> CAss_congruence thm
R16551:16575 Equiv <> fold_constants_aexp_sound thm
R16551:16575 Equiv <> fold_constants_aexp_sound thm
R16597:16611 Equiv <> CSeq_congruence thm
R16597:16611 Equiv <> CSeq_congruence thm
R16652:16657 Equiv <> bequiv def
R16662:16680 Equiv <> fold_constants_bexp def
R16652:16657 Equiv <> bequiv def
R16662:16680 Equiv <> fold_constants_bexp def
R16724:16748 Equiv <> fold_constants_bexp_sound thm
R16724:16748 Equiv <> fold_constants_bexp_sound thm
R16765:16783 Equiv <> fold_constants_bexp def
R16957:16970 Equiv <> CIf_congruence thm
R16765:16783 Equiv <> fold_constants_bexp def
R16957:16970 Equiv <> CIf_congruence thm
R16957:16970 Equiv <> CIf_congruence thm
R16957:16970 Equiv <> CIf_congruence thm
R16957:16970 Equiv <> CIf_congruence thm
R16957:16970 Equiv <> CIf_congruence thm
R16957:16970 Equiv <> CIf_congruence thm
R17025:17036 Equiv <> trans_cequiv thm
R17025:17036 Equiv <> trans_cequiv thm
R17075:17082 Equiv <> IFB_true thm
R17075:17082 Equiv <> IFB_true thm
R17137:17148 Equiv <> trans_cequiv thm
R17137:17148 Equiv <> trans_cequiv thm
R17187:17195 Equiv <> IFB_false thm
R17187:17195 Equiv <> IFB_false thm
R17238:17243 Equiv <> bequiv def
R17248:17266 Equiv <> fold_constants_bexp def
R17238:17243 Equiv <> bequiv def
R17248:17266 Equiv <> fold_constants_bexp def
R17285:17309 Equiv <> fold_constants_bexp_sound thm
R17285:17309 Equiv <> fold_constants_bexp_sound thm
R17326:17344 Equiv <> fold_constants_bexp def
R17326:17344 Equiv <> fold_constants_bexp def
R17371:17380 Equiv <> WHILE_true thm
R17371:17380 Equiv <> WHILE_true thm
R17401:17411 Equiv <> WHILE_false thm
R17401:17411 Equiv <> WHILE_false thm
R17436:17452 Equiv <> CWhile_congruence thm
R17436:17452 Equiv <> CWhile_congruence thm
R17477:17493 Equiv <> CWhile_congruence thm
R17477:17493 Equiv <> CWhile_congruence thm
R17518:17534 Equiv <> CWhile_congruence thm
R17518:17534 Equiv <> CWhile_congruence thm
R17559:17575 Equiv <> CWhile_congruence thm
R17559:17575 Equiv <> CWhile_congruence thm
def 17601:17619 <> optimize_0plus_aexp
R17624:17627 Imp <> aexp ind
R17632:17635 Imp <> aexp ind
R17653:17653 Equiv <> e var
R17668:17671 Imp <> ANum constr
R17689:17692 Imp <> ANum constr
R17704:17706 Imp <> AId constr
R17713:17715 Imp <> AId constr
R17727:17731 Imp <> APlus constr
R17734:17737 Imp <> ANum constr
R17759:17777 Equiv <> optimize_0plus_aexp def
R17790:17794 Imp <> APlus constr
R17816:17820 Imp <> APlus constr
R17848:17866 Equiv <> optimize_0plus_aexp def
R17823:17841 Equiv <> optimize_0plus_aexp def
R17880:17885 Imp <> AMinus constr
R17907:17912 Imp <> AMinus constr
R17940:17958 Equiv <> optimize_0plus_aexp def
R17915:17933 Equiv <> optimize_0plus_aexp def
R17972:17976 Imp <> AMult constr
R17998:18002 Imp <> AMult constr
R18030:18048 Equiv <> optimize_0plus_aexp def
R18005:18023 Equiv <> optimize_0plus_aexp def
def 18075:18093 <> optimize_0plus_bexp
R18100:18103 Imp <> bexp ind
R18108:18111 Imp <> bexp ind
R18124:18124 Equiv <> b var
R18135:18139 Imp <> BTrue constr
R18144:18148 Imp <> BTrue constr
R18154:18159 Imp <> BFalse constr
R18164:18169 Imp <> BFalse constr
R18175:18177 Imp <> BEq constr
R18188:18190 Imp <> BEq constr
R18218:18236 Equiv <> optimize_0plus_aexp def
R18193:18211 Equiv <> optimize_0plus_aexp def
R18246:18248 Imp <> BLe constr
R18259:18261 Imp <> BLe constr
R18289:18307 Equiv <> optimize_0plus_aexp def
R18264:18282 Equiv <> optimize_0plus_aexp def
R18317:18320 Imp <> BNot constr
R18328:18331 Imp <> BNot constr
R18334:18352 Equiv <> optimize_0plus_bexp def
R18362:18365 Imp <> BAnd constr
R18376:18379 Imp <> BAnd constr
R18407:18425 Equiv <> optimize_0plus_bexp def
R18382:18400 Equiv <> optimize_0plus_bexp def
def 18448:18465 <> optimize_0plus_com
R18472:18474 Imp <> com ind
R18479:18481 Imp <> com ind
R18494:18494 Equiv <> c var
R18505:18508 Imp <> ::'SKIP' not
R18519:18522 Imp <> ::'SKIP' not
R18529:18533 Imp <> ::x_'::='_x not
R18545:18548 Imp <> CAss constr
R18553:18571 Equiv <> optimize_0plus_aexp def
R18582:18585 Imp <> ::x_';;'_x not
R18598:18598 Imp <> ::x_';;'_x not
R18620:18625 Imp <> ::x_';;'_x not
R18647:18647 Imp <> ::x_';;'_x not
R18599:18616 Equiv <> optimize_0plus_com def
R18626:18643 Equiv <> optimize_0plus_com def
R18653:18656 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R18658:18663 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R18666:18671 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R18674:18676 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R18687:18691 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R18713:18719 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R18741:18767 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R18789:18791 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R18692:18710 Equiv <> optimize_0plus_bexp def
R18720:18737 Equiv <> optimize_0plus_com def
R18768:18785 Equiv <> optimize_0plus_com def
R18797:18802 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R18804:18807 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R18809:18812 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R18823:18829 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R18851:18856 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R18877:18881 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R18830:18848 Equiv <> optimize_0plus_bexp def
R18857:18874 Equiv <> optimize_0plus_com def
R18876:18876 Equiv <> c var
prf 18899:18923 <> optimize_0plus_aexp_sound
R18929:18940 Equiv <> atrans_sound def
R18942:18960 Equiv <> optimize_0plus_aexp def
prf 19102:19126 <> optimize_0plus_bexp_sound
R19131:19142 Equiv <> btrans_sound def
R19144:19162 Equiv <> optimize_0plus_bexp def
R19236:19260 Equiv <> optimize_0plus_aexp_sound thm
R19280:19304 Equiv <> optimize_0plus_aexp_sound thm
R19236:19260 Equiv <> optimize_0plus_aexp_sound thm
R19236:19260 Equiv <> optimize_0plus_aexp_sound thm
R19236:19260 Equiv <> optimize_0plus_aexp_sound thm
R19236:19260 Equiv <> optimize_0plus_aexp_sound thm
R19280:19304 Equiv <> optimize_0plus_aexp_sound thm
R19280:19304 Equiv <> optimize_0plus_aexp_sound thm
R19280:19304 Equiv <> optimize_0plus_aexp_sound thm
R19280:19304 Equiv <> optimize_0plus_aexp_sound thm
prf 19386:19409 <> optimize_0plus_com_sound
R19415:19426 Equiv <> ctrans_sound def
R19428:19445 Equiv <> optimize_0plus_com def
R19464:19475 Equiv <> ctrans_sound def
R19538:19552 Equiv <> CAss_congruence thm
R19538:19552 Equiv <> CAss_congruence thm
R19561:19585 Equiv <> optimize_0plus_aexp_sound thm
R19561:19585 Equiv <> optimize_0plus_aexp_sound thm
R19598:19612 Equiv <> CSeq_congruence thm
R19598:19612 Equiv <> CSeq_congruence thm
R19631:19644 Equiv <> CIf_congruence thm
R19663:19687 Equiv <> optimize_0plus_bexp_sound thm
R19631:19644 Equiv <> CIf_congruence thm
R19663:19687 Equiv <> optimize_0plus_bexp_sound thm
R19700:19716 Equiv <> CWhile_congruence thm
R19735:19759 Equiv <> optimize_0plus_bexp_sound thm
R19700:19716 Equiv <> CWhile_congruence thm
R19735:19759 Equiv <> optimize_0plus_bexp_sound thm
def 19781:19805 <> optimizer_0plus_const_com
R19812:19814 Imp <> com ind
R19819:19821 Imp <> com ind
R19828:19845 Equiv <> optimize_0plus_com def
R19848:19865 Equiv <> fold_constants_com def
R19867:19867 Equiv <> c var
def 19880:19887 <> optexam1
R20381:20420 Coq.Init.Logic <> :type_scope:x_'='_x not
R20697:20697 Coq.Init.Logic <> :type_scope:x_'='_x not
R19893:19917 Equiv <> optimizer_0plus_const_com def
R19981:19988 Imp <> ::x_';;'_x not
R19953:19957 Imp <> ::x_'::='_x not
R19952:19952 Imp <> X def
R19958:19962 Imp <> APlus constr
R19974:19977 Imp <> ANum constr
R19965:19968 Imp <> ANum constr
R20017:20024 Imp <> ::x_';;'_x not
R19990:19994 Imp <> ::x_'::='_x not
R19989:19989 Imp <> X def
R19995:19999 Imp <> APlus constr
R20011:20013 Imp <> AId constr
R20015:20015 Imp <> X def
R20002:20005 Imp <> ANum constr
R20054:20061 Imp <> ::x_';;'_x not
R20026:20030 Imp <> ::x_'::='_x not
R20025:20025 Imp <> Y def
R20031:20036 Imp <> AMinus constr
R20047:20050 Imp <> ANum constr
R20039:20041 Imp <> AId constr
R20043:20043 Imp <> X def
R20175:20182 Imp <> ::x_';;'_x not
R20062:20065 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R20120:20132 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R20137:20154 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R20167:20174 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R20066:20068 Imp <> BEq constr
R20096:20100 Imp <> APlus constr
R20112:20115 Imp <> ANum constr
R20103:20106 Imp <> ANum constr
R20071:20076 Imp <> AMinus constr
R20087:20089 Imp <> AId constr
R20091:20091 Imp <> Y def
R20079:20081 Imp <> AId constr
R20083:20083 Imp <> X def
R20133:20136 Imp <> ::'SKIP' not
R20156:20160 Imp <> ::x_'::='_x not
R20155:20155 Imp <> Y def
R20161:20164 Imp <> ANum constr
R20298:20305 Imp <> ::x_';;'_x not
R20183:20186 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R20243:20255 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R20268:20285 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R20290:20297 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R20187:20189 Imp <> BLe constr
R20201:20206 Imp <> AMinus constr
R20218:20222 Imp <> APlus constr
R20234:20237 Imp <> ANum constr
R20225:20228 Imp <> ANum constr
R20209:20212 Imp <> ANum constr
R20192:20195 Imp <> ANum constr
R20257:20261 Imp <> ::x_'::='_x not
R20256:20256 Imp <> Y def
R20262:20265 Imp <> ANum constr
R20286:20289 Imp <> ::'SKIP' not
R20306:20311 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20332:20342 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20371:20379 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20312:20314 Imp <> BEq constr
R20325:20328 Imp <> ANum constr
R20317:20319 Imp <> AId constr
R20321:20321 Imp <> Y def
R20344:20348 Imp <> ::x_'::='_x not
R20343:20343 Imp <> X def
R20349:20353 Imp <> APlus constr
R20364:20367 Imp <> ANum constr
R20356:20358 Imp <> AId constr
R20360:20360 Imp <> X def
R20433:20440 Imp <> ::x_';;'_x not
R20422:20426 Imp <> ::x_'::='_x not
R20421:20421 Imp <> X def
R20427:20430 Imp <> ANum constr
R20452:20459 Imp <> ::x_';;'_x not
R20442:20446 Imp <> ::x_'::='_x not
R20441:20441 Imp <> X def
R20447:20449 Imp <> AId constr
R20451:20451 Imp <> X def
R20489:20496 Imp <> ::x_';;'_x not
R20461:20465 Imp <> ::x_'::='_x not
R20460:20460 Imp <> Y def
R20466:20471 Imp <> AMinus constr
R20482:20485 Imp <> ANum constr
R20474:20476 Imp <> AId constr
R20478:20478 Imp <> X def
R20595:20602 Imp <> ::x_';;'_x not
R20497:20500 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R20538:20550 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R20555:20573 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R20586:20594 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R20501:20503 Imp <> BEq constr
R20531:20534 Imp <> ANum constr
R20506:20511 Imp <> AMinus constr
R20522:20524 Imp <> AId constr
R20526:20526 Imp <> Y def
R20514:20516 Imp <> AId constr
R20518:20518 Imp <> X def
R20551:20554 Imp <> ::'SKIP' not
R20575:20579 Imp <> ::x_'::='_x not
R20574:20574 Imp <> Y def
R20580:20583 Imp <> ANum constr
R20615:20622 Imp <> ::x_';;'_x not
R20604:20608 Imp <> ::x_'::='_x not
R20603:20603 Imp <> Y def
R20609:20612 Imp <> ANum constr
R20623:20628 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20649:20659 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20688:20696 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20629:20631 Imp <> BEq constr
R20642:20645 Imp <> ANum constr
R20634:20636 Imp <> AId constr
R20638:20638 Imp <> Y def
R20661:20665 Imp <> ::x_'::='_x not
R20660:20660 Imp <> X def
R20666:20670 Imp <> APlus constr
R20681:20684 Imp <> ANum constr
R20673:20675 Imp <> AId constr
R20677:20677 Imp <> X def
prf 20734:20764 <> optimizer_0plus_const_com_sound
R20770:20781 Equiv <> ctrans_sound def
R20783:20807 Equiv <> optimizer_0plus_const_com def
R20826:20837 Equiv <> ctrans_sound def
R20858:20882 Equiv <> optimizer_0plus_const_com def
R20911:20934 Equiv <> fold_constants_com_sound thm
R20911:20934 Equiv <> fold_constants_com_sound thm
R20950:20973 Equiv <> optimize_0plus_com_sound thm
R20950:20973 Equiv <> optimize_0plus_com_sound thm
R21007:21030 Equiv <> fold_constants_com_sound thm
R21007:21030 Equiv <> fold_constants_com_sound thm
R21041:21064 Equiv <> optimize_0plus_com_sound thm
R21041:21064 Equiv <> optimize_0plus_com_sound thm
def 21092:21101 <> subst_aexp
R21108:21109 SfLib <> id ind
R21117:21120 Imp <> aexp ind
R21128:21131 Imp <> aexp ind
R21136:21139 Imp <> aexp ind
R21152:21152 Equiv <> a var
R21163:21166 Imp <> ANum constr
R21173:21176 Imp <> ANum constr
R21184:21186 Imp <> AId constr
R21197:21205 SfLib <> eq_id_dec thm
R21207:21207 Equiv <> i var
R21224:21226 Imp <> AId constr
R21217:21217 Equiv <> u var
R21235:21239 Imp <> APlus constr
R21250:21254 Imp <> APlus constr
R21277:21286 Equiv <> subst_aexp def
R21290:21290 Equiv <> u var
R21288:21288 Equiv <> i var
R21257:21266 Equiv <> subst_aexp def
R21270:21270 Equiv <> u var
R21268:21268 Equiv <> i var
R21300:21305 Imp <> AMinus constr
R21316:21321 Imp <> AMinus constr
R21344:21353 Equiv <> subst_aexp def
R21357:21357 Equiv <> u var
R21355:21355 Equiv <> i var
R21324:21333 Equiv <> subst_aexp def
R21337:21337 Equiv <> u var
R21335:21335 Equiv <> i var
R21367:21371 Imp <> AMult constr
R21382:21386 Imp <> AMult constr
R21409:21418 Equiv <> subst_aexp def
R21422:21422 Equiv <> u var
R21420:21420 Equiv <> i var
R21389:21398 Equiv <> subst_aexp def
R21402:21402 Equiv <> u var
R21400:21400 Equiv <> i var
def 21444:21456 <> subst_aexp_ex
R21526:21531 Coq.Init.Logic <> :type_scope:x_'='_x not
R21573:21573 Coq.Init.Logic <> :type_scope:x_'='_x not
R21462:21471 Equiv <> subst_aexp def
R21504:21508 Imp <> APlus constr
R21519:21521 Imp <> AId constr
R21523:21523 Imp <> X def
R21511:21513 Imp <> AId constr
R21515:21515 Imp <> Y def
R21476:21480 Imp <> APlus constr
R21493:21496 Imp <> ANum constr
R21483:21486 Imp <> ANum constr
R21473:21473 Imp <> X def
R21532:21536 Imp <> APlus constr
R21547:21551 Imp <> APlus constr
R21564:21567 Imp <> ANum constr
R21554:21557 Imp <> ANum constr
R21539:21541 Imp <> AId constr
R21543:21543 Imp <> Y def
def 21613:21632 <> subst_equiv_property
R21659:21664 Equiv <> cequiv def
R21709:21711 Imp <> ::x_';;'_x not
R21702:21706 Imp <> ::x_'::='_x not
R21700:21701 Equiv <> i1 var
R21707:21708 Equiv <> a1 var
R21714:21718 Imp <> ::x_'::='_x not
R21712:21713 Equiv <> i2 var
R21719:21728 Equiv <> subst_aexp def
R21736:21737 Equiv <> a2 var
R21733:21734 Equiv <> a1 var
R21730:21731 Equiv <> i1 var
R21676:21678 Imp <> ::x_';;'_x not
R21669:21673 Imp <> ::x_'::='_x not
R21667:21668 Equiv <> i1 var
R21674:21675 Equiv <> a1 var
R21681:21685 Imp <> ::x_'::='_x not
R21679:21680 Equiv <> i2 var
R21686:21687 Equiv <> a2 var
prf 21750:21762 <> subst_inequiv
R21768:21769 Coq.Init.Logic <> :type_scope:'~'_x not
R21770:21789 Equiv <> subst_equiv_property def
R21808:21827 Equiv <> subst_equiv_property def
R22036:22050 Imp <> ::x_';;'_x not
R22009:22013 Imp <> ::x_'::='_x not
R22008:22008 Imp <> X def
R22014:22018 Imp <> APlus constr
R22029:22032 Imp <> ANum constr
R22021:22023 Imp <> AId constr
R22025:22025 Imp <> X def
R22052:22056 Imp <> ::x_'::='_x not
R22051:22051 Imp <> Y def
R22057:22059 Imp <> AId constr
R22061:22061 Imp <> X def
R22036:22050 Imp <> ::x_';;'_x not
R22009:22013 Imp <> ::x_'::='_x not
R22008:22008 Imp <> X def
R22014:22018 Imp <> APlus constr
R22029:22032 Imp <> ANum constr
R22021:22023 Imp <> AId constr
R22025:22025 Imp <> X def
R22052:22056 Imp <> ::x_'::='_x not
R22051:22051 Imp <> Y def
R22057:22059 Imp <> AId constr
R22061:22061 Imp <> X def
R22117:22131 Imp <> ::x_';;'_x not
R22090:22094 Imp <> ::x_'::='_x not
R22089:22089 Imp <> X def
R22095:22099 Imp <> APlus constr
R22110:22113 Imp <> ANum constr
R22102:22104 Imp <> AId constr
R22106:22106 Imp <> X def
R22133:22137 Imp <> ::x_'::='_x not
R22132:22132 Imp <> Y def
R22138:22142 Imp <> APlus constr
R22153:22156 Imp <> ANum constr
R22145:22147 Imp <> AId constr
R22149:22149 Imp <> X def
R22117:22131 Imp <> ::x_';;'_x not
R22090:22094 Imp <> ::x_'::='_x not
R22089:22089 Imp <> X def
R22095:22099 Imp <> APlus constr
R22110:22113 Imp <> ANum constr
R22102:22104 Imp <> AId constr
R22106:22106 Imp <> X def
R22133:22137 Imp <> ::x_'::='_x not
R22132:22132 Imp <> Y def
R22138:22142 Imp <> APlus constr
R22153:22156 Imp <> ANum constr
R22145:22147 Imp <> AId constr
R22149:22149 Imp <> X def
R22185:22190 Equiv <> cequiv def
R22185:22190 Equiv <> cequiv def
R22408:22413 Imp <> update def
R22440:22440 Imp <> Y def
R22416:22421 Imp <> update def
R22435:22435 Imp <> X def
R22423:22433 Imp <> empty_state def
R22408:22413 Imp <> update def
R22440:22440 Imp <> Y def
R22416:22421 Imp <> update def
R22435:22435 Imp <> X def
R22423:22433 Imp <> empty_state def
R22465:22470 Imp <> update def
R22497:22497 Imp <> Y def
R22473:22478 Imp <> update def
R22492:22492 Imp <> X def
R22480:22490 Imp <> empty_state def
R22465:22470 Imp <> update def
R22497:22497 Imp <> Y def
R22473:22478 Imp <> update def
R22492:22492 Imp <> X def
R22480:22490 Imp <> empty_state def
R22526:22528 Imp <> ::x_'/'_x_'||'_x not
R22540:22543 Imp <> ::x_'/'_x_'||'_x not
R22529:22539 Imp <> empty_state def
R22566:22568 Imp <> ::x_'/'_x_'||'_x not
R22580:22583 Imp <> ::x_'/'_x_'||'_x not
R22569:22579 Imp <> empty_state def
R22637:22642 Imp <> update def
R22656:22656 Imp <> X def
R22644:22654 Imp <> empty_state def
R22617:22621 Imp <> E_Seq constr
R22676:22680 Imp <> E_Ass constr
R22526:22528 Imp <> ::x_'/'_x_'||'_x not
R22540:22543 Imp <> ::x_'/'_x_'||'_x not
R22529:22539 Imp <> empty_state def
R22566:22568 Imp <> ::x_'/'_x_'||'_x not
R22580:22583 Imp <> ::x_'/'_x_'||'_x not
R22569:22579 Imp <> empty_state def
R22566:22568 Imp <> ::x_'/'_x_'||'_x not
R22580:22583 Imp <> ::x_'/'_x_'||'_x not
R22569:22579 Imp <> empty_state def
R22637:22642 Imp <> update def
R22656:22656 Imp <> X def
R22644:22654 Imp <> empty_state def
R22617:22621 Imp <> E_Seq constr
R22676:22680 Imp <> E_Ass constr
R22676:22680 Imp <> E_Ass constr
R22637:22642 Imp <> update def
R22656:22656 Imp <> X def
R22644:22654 Imp <> empty_state def
R22617:22621 Imp <> E_Seq constr
R22676:22680 Imp <> E_Ass constr
R22676:22680 Imp <> E_Ass constr
R22637:22642 Imp <> update def
R22656:22656 Imp <> X def
R22644:22654 Imp <> empty_state def
R22617:22621 Imp <> E_Seq constr
R22676:22680 Imp <> E_Ass constr
R22676:22680 Imp <> E_Ass constr
R22637:22642 Imp <> update def
R22656:22656 Imp <> X def
R22644:22654 Imp <> empty_state def
R22617:22621 Imp <> E_Seq constr
R22835:22837 Coq.Init.Logic <> :type_scope:x_'='_x not
R22858:22876 Imp <> ceval_deterministic thm
R22881:22891 Imp <> empty_state def
R22835:22837 Coq.Init.Logic <> :type_scope:x_'='_x not
R22858:22876 Imp <> ceval_deterministic thm
R22881:22891 Imp <> empty_state def
R22933:22935 Coq.Init.Logic <> :type_scope:x_'='_x not
R22932:22932 Imp <> Y def
R22940:22940 Imp <> Y def
R22933:22935 Coq.Init.Logic <> :type_scope:x_'='_x not
R22932:22932 Imp <> Y def
R22940:22940 Imp <> Y def
ind 23027:23046 <> var_not_used_in_aexp
constr 23077:23082 <> VNUNum
constr 23131:23135 <> VNUId
constr 23193:23199 <> VNUPlus
constr 23333:23340 <> VNUMinus
constr 23475:23481 <> VNUMult
R23051:23052 SfLib <> id ind
R23057:23060 Imp <> aexp ind
R23095:23114 Equiv <> var_not_used_in_aexp ind
R23119:23122 Imp <> ANum constr
R23124:23124 Equiv <> n var
R23158:23177 Equiv <> var_not_used_in_aexp ind
R23182:23184 Imp <> AId constr
R23186:23186 Equiv <> Y var
R23149:23152 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R23153:23153 Equiv <> Y var
R23292:23311 Equiv <> var_not_used_in_aexp ind
R23316:23320 Imp <> APlus constr
R23325:23326 Equiv <> a2 var
R23322:23323 Equiv <> a1 var
R23257:23276 Equiv <> var_not_used_in_aexp ind
R23280:23281 Equiv <> a2 var
R23222:23241 Equiv <> var_not_used_in_aexp ind
R23245:23246 Equiv <> a1 var
R23433:23452 Equiv <> var_not_used_in_aexp ind
R23457:23462 Imp <> AMinus constr
R23467:23468 Equiv <> a2 var
R23464:23465 Equiv <> a1 var
R23398:23417 Equiv <> var_not_used_in_aexp ind
R23421:23422 Equiv <> a2 var
R23363:23382 Equiv <> var_not_used_in_aexp ind
R23386:23387 Equiv <> a1 var
R23574:23593 Equiv <> var_not_used_in_aexp ind
R23598:23602 Imp <> AMult constr
R23607:23608 Equiv <> a2 var
R23604:23605 Equiv <> a1 var
R23539:23558 Equiv <> var_not_used_in_aexp ind
R23562:23563 Equiv <> a2 var
R23504:23523 Equiv <> var_not_used_in_aexp ind
R23527:23528 Equiv <> a1 var
prf 23619:23633 <> aeval_weakening
R23711:23713 Coq.Init.Logic <> :type_scope:x_'='_x not
R23687:23691 Imp <> aeval def
R23710:23710 Equiv <> a var
R23694:23699 Imp <> update def
R23706:23707 Equiv <> ni var
R23704:23704 Equiv <> i var
R23701:23702 Equiv <> st var
R23714:23718 Imp <> aeval def
R23723:23723 Equiv <> a var
R23720:23721 Equiv <> st var
R23657:23676 Equiv <> var_not_used_in_aexp ind
R23680:23680 Equiv <> a var
R23678:23678 Equiv <> i var
R23838:23843 SfLib <> neq_id prfax
R23838:23843 SfLib <> neq_id prfax
def 23871:23891 <> subst_equiv_property'
R23950:23955 Equiv <> cequiv def
R24000:24002 Imp <> ::x_';;'_x not
R23993:23997 Imp <> ::x_'::='_x not
R23991:23992 Equiv <> i1 var
R23998:23999 Equiv <> a1 var
R24005:24009 Imp <> ::x_'::='_x not
R24003:24004 Equiv <> i2 var
R24010:24019 Equiv <> subst_aexp def
R24027:24028 Equiv <> a2 var
R24024:24025 Equiv <> a1 var
R24021:24022 Equiv <> i1 var
R23967:23969 Imp <> ::x_';;'_x not
R23960:23964 Imp <> ::x_'::='_x not
R23958:23959 Equiv <> i1 var
R23965:23966 Equiv <> a1 var
R23972:23976 Imp <> ::x_'::='_x not
R23970:23971 Equiv <> i2 var
R23977:23978 Equiv <> a2 var
R23918:23937 Equiv <> var_not_used_in_aexp ind
R23942:23943 Equiv <> a1 var
R23939:23940 Equiv <> i1 var
prf 24041:24051 <> subst_equiv
R24057:24077 Equiv <> subst_equiv_property' def
R24156:24160 Imp <> E_Seq constr
R24156:24160 Imp <> E_Seq constr
R24302:24306 Imp <> E_Ass constr
R24302:24306 Imp <> E_Ass constr
R24354:24362 SfLib <> eq_id_dec thm
R24354:24362 SfLib <> eq_id_dec thm
R24426:24440 Equiv <> aeval_weakening thm
R24426:24440 Equiv <> aeval_weakening thm
R24456:24461 Imp <> update def
R24472:24476 SfLib <> eq_id thm
R24472:24476 SfLib <> eq_id thm
R24525:24525 Imp <> ::x_'/'_x_'||'_x not
R24554:24557 Imp <> ::x_'/'_x_'||'_x not
R24562:24565 Imp <> ::x_'/'_x_'||'_x not
R24528:24532 Imp <> ::x_'::='_x not
R24533:24542 Equiv <> subst_aexp def
R24566:24571 Imp <> update def
R24582:24586 Imp <> aeval def
R24525:24525 Imp <> ::x_'/'_x_'||'_x not
R24554:24557 Imp <> ::x_'/'_x_'||'_x not
R24562:24565 Imp <> ::x_'/'_x_'||'_x not
R24528:24532 Imp <> ::x_'::='_x not
R24533:24542 Equiv <> subst_aexp def
R24566:24571 Imp <> update def
R24582:24586 Imp <> aeval def
R24643:24643 Imp <> ::x_'/'_x_'||'_x not
R24672:24675 Imp <> ::x_'/'_x_'||'_x not
R24680:24683 Imp <> ::x_'/'_x_'||'_x not
R24646:24650 Imp <> ::x_'::='_x not
R24651:24660 Equiv <> subst_aexp def
R24684:24689 Imp <> update def
R24700:24704 Imp <> aeval def
R24643:24643 Imp <> ::x_'/'_x_'||'_x not
R24672:24675 Imp <> ::x_'/'_x_'||'_x not
R24680:24683 Imp <> ::x_'/'_x_'||'_x not
R24646:24650 Imp <> ::x_'::='_x not
R24651:24660 Equiv <> subst_aexp def
R24684:24689 Imp <> update def
R24700:24704 Imp <> aeval def
R24767:24771 Imp <> E_Ass constr
R24767:24771 Imp <> E_Ass constr
R24824:24826 Coq.Init.Logic <> :type_scope:x_'='_x not
R24790:24794 Imp <> aeval def
R24802:24811 Equiv <> subst_aexp def
R24827:24831 Imp <> aeval def
R24824:24826 Coq.Init.Logic <> :type_scope:x_'='_x not
R24790:24794 Imp <> aeval def
R24802:24811 Equiv <> subst_aexp def
R24827:24831 Imp <> aeval def
R24902:24904 Coq.Init.Logic <> :type_scope:x_'='_x not
R24883:24888 Imp <> update def
R24905:24910 Imp <> update def
R24921:24925 Imp <> aeval def
R24902:24904 Coq.Init.Logic <> :type_scope:x_'='_x not
R24883:24888 Imp <> update def
R24905:24910 Imp <> update def
R24921:24925 Imp <> aeval def
R24975:24983 Imp <> update_eq thm
R24975:24983 Imp <> update_eq thm
R25000:25008 Imp <> update_eq thm
R25000:25008 Imp <> update_eq thm
R25066:25068 Coq.Init.Logic <> :type_scope:x_'='_x not
R25032:25036 Imp <> aeval def
R25044:25053 Equiv <> subst_aexp def
R25069:25073 Imp <> aeval def
R25066:25068 Coq.Init.Logic <> :type_scope:x_'='_x not
R25032:25036 Imp <> aeval def
R25044:25053 Equiv <> subst_aexp def
R25069:25073 Imp <> aeval def
R25144:25146 Coq.Init.Logic <> :type_scope:x_'='_x not
R25125:25130 Imp <> update def
R25147:25152 Imp <> update def
R25163:25167 Imp <> aeval def
R25144:25146 Coq.Init.Logic <> :type_scope:x_'='_x not
R25125:25130 Imp <> update def
R25147:25152 Imp <> update def
R25163:25167 Imp <> aeval def
R25217:25225 Imp <> update_eq thm
R25217:25225 Imp <> update_eq thm
R25243:25251 Imp <> update_eq thm
R25243:25251 Imp <> update_eq thm
R25319:25319 Imp <> ::x_'/'_x_'||'_x not
R25348:25351 Imp <> ::x_'/'_x_'||'_x not
R25356:25359 Imp <> ::x_'/'_x_'||'_x not
R25322:25326 Imp <> ::x_'::='_x not
R25327:25336 Equiv <> subst_aexp def
R25360:25365 Imp <> update def
R25376:25380 Imp <> aeval def
R25319:25319 Imp <> ::x_'/'_x_'||'_x not
R25348:25351 Imp <> ::x_'/'_x_'||'_x not
R25356:25359 Imp <> ::x_'/'_x_'||'_x not
R25322:25326 Imp <> ::x_'::='_x not
R25327:25336 Equiv <> subst_aexp def
R25360:25365 Imp <> update def
R25376:25380 Imp <> aeval def
R25437:25437 Imp <> ::x_'/'_x_'||'_x not
R25466:25469 Imp <> ::x_'/'_x_'||'_x not
R25474:25477 Imp <> ::x_'/'_x_'||'_x not
R25440:25444 Imp <> ::x_'::='_x not
R25445:25454 Equiv <> subst_aexp def
R25478:25483 Imp <> update def
R25494:25498 Imp <> aeval def
R25437:25437 Imp <> ::x_'/'_x_'||'_x not
R25466:25469 Imp <> ::x_'/'_x_'||'_x not
R25474:25477 Imp <> ::x_'/'_x_'||'_x not
R25440:25444 Imp <> ::x_'::='_x not
R25445:25454 Equiv <> subst_aexp def
R25478:25483 Imp <> update def
R25494:25498 Imp <> aeval def
R25582:25586 Imp <> E_Ass constr
R25582:25586 Imp <> E_Ass constr
R25639:25641 Coq.Init.Logic <> :type_scope:x_'='_x not
R25605:25609 Imp <> aeval def
R25617:25626 Equiv <> subst_aexp def
R25642:25646 Imp <> aeval def
R25639:25641 Coq.Init.Logic <> :type_scope:x_'='_x not
R25605:25609 Imp <> aeval def
R25617:25626 Equiv <> subst_aexp def
R25642:25646 Imp <> aeval def
R25717:25719 Coq.Init.Logic <> :type_scope:x_'='_x not
R25698:25703 Imp <> update def
R25720:25725 Imp <> update def
R25736:25740 Imp <> aeval def
R25717:25719 Coq.Init.Logic <> :type_scope:x_'='_x not
R25698:25703 Imp <> update def
R25720:25725 Imp <> update def
R25736:25740 Imp <> aeval def
R25790:25798 Imp <> update_eq thm
R25790:25798 Imp <> update_eq thm
R25815:25823 Imp <> update_eq thm
R25815:25823 Imp <> update_eq thm
R25881:25883 Coq.Init.Logic <> :type_scope:x_'='_x not
R25847:25851 Imp <> aeval def
R25859:25868 Equiv <> subst_aexp def
R25884:25888 Imp <> aeval def
R25881:25883 Coq.Init.Logic <> :type_scope:x_'='_x not
R25847:25851 Imp <> aeval def
R25859:25868 Equiv <> subst_aexp def
R25884:25888 Imp <> aeval def
R25959:25961 Coq.Init.Logic <> :type_scope:x_'='_x not
R25940:25945 Imp <> update def
R25962:25967 Imp <> update def
R25978:25982 Imp <> aeval def
R25959:25961 Coq.Init.Logic <> :type_scope:x_'='_x not
R25940:25945 Imp <> update def
R25962:25967 Imp <> update def
R25978:25982 Imp <> aeval def
R26032:26040 Imp <> update_eq thm
R26032:26040 Imp <> update_eq thm
R26058:26066 Imp <> update_eq thm
R26058:26066 Imp <> update_eq thm
R26131:26131 Imp <> ::x_'/'_x_'||'_x not
R26160:26163 Imp <> ::x_'/'_x_'||'_x not
R26168:26171 Imp <> ::x_'/'_x_'||'_x not
R26134:26138 Imp <> ::x_'::='_x not
R26139:26148 Equiv <> subst_aexp def
R26172:26177 Imp <> update def
R26188:26192 Imp <> aeval def
R26131:26131 Imp <> ::x_'/'_x_'||'_x not
R26160:26163 Imp <> ::x_'/'_x_'||'_x not
R26168:26171 Imp <> ::x_'/'_x_'||'_x not
R26134:26138 Imp <> ::x_'::='_x not
R26139:26148 Equiv <> subst_aexp def
R26172:26177 Imp <> update def
R26188:26192 Imp <> aeval def
R26249:26249 Imp <> ::x_'/'_x_'||'_x not
R26278:26281 Imp <> ::x_'/'_x_'||'_x not
R26286:26289 Imp <> ::x_'/'_x_'||'_x not
R26252:26256 Imp <> ::x_'::='_x not
R26257:26266 Equiv <> subst_aexp def
R26290:26295 Imp <> update def
R26306:26310 Imp <> aeval def
R26249:26249 Imp <> ::x_'/'_x_'||'_x not
R26278:26281 Imp <> ::x_'/'_x_'||'_x not
R26286:26289 Imp <> ::x_'/'_x_'||'_x not
R26252:26256 Imp <> ::x_'::='_x not
R26257:26266 Equiv <> subst_aexp def
R26290:26295 Imp <> update def
R26306:26310 Imp <> aeval def
R26394:26398 Imp <> E_Ass constr
R26394:26398 Imp <> E_Ass constr
R26451:26453 Coq.Init.Logic <> :type_scope:x_'='_x not
R26417:26421 Imp <> aeval def
R26429:26438 Equiv <> subst_aexp def
R26454:26458 Imp <> aeval def
R26451:26453 Coq.Init.Logic <> :type_scope:x_'='_x not
R26417:26421 Imp <> aeval def
R26429:26438 Equiv <> subst_aexp def
R26454:26458 Imp <> aeval def
R26529:26531 Coq.Init.Logic <> :type_scope:x_'='_x not
R26510:26515 Imp <> update def
R26532:26537 Imp <> update def
R26548:26552 Imp <> aeval def
R26529:26531 Coq.Init.Logic <> :type_scope:x_'='_x not
R26510:26515 Imp <> update def
R26532:26537 Imp <> update def
R26548:26552 Imp <> aeval def
R26602:26610 Imp <> update_eq thm
R26602:26610 Imp <> update_eq thm
R26627:26635 Imp <> update_eq thm
R26627:26635 Imp <> update_eq thm
R26693:26695 Coq.Init.Logic <> :type_scope:x_'='_x not
R26659:26663 Imp <> aeval def
R26671:26680 Equiv <> subst_aexp def
R26696:26700 Imp <> aeval def
R26693:26695 Coq.Init.Logic <> :type_scope:x_'='_x not
R26659:26663 Imp <> aeval def
R26671:26680 Equiv <> subst_aexp def
R26696:26700 Imp <> aeval def
R26771:26773 Coq.Init.Logic <> :type_scope:x_'='_x not
R26752:26757 Imp <> update def
R26774:26779 Imp <> update def
R26790:26794 Imp <> aeval def
R26771:26773 Coq.Init.Logic <> :type_scope:x_'='_x not
R26752:26757 Imp <> update def
R26774:26779 Imp <> update def
R26790:26794 Imp <> aeval def
R26844:26852 Imp <> update_eq thm
R26844:26852 Imp <> update_eq thm
R26870:26878 Imp <> update_eq thm
R26870:26878 Imp <> update_eq thm
R26942:26946 Imp <> E_Seq constr
R26942:26946 Imp <> E_Seq constr
R27054:27062 SfLib <> eq_id_dec thm
R27054:27062 SfLib <> eq_id_dec thm
R27079:27083 Imp <> E_Ass constr
R27079:27083 Imp <> E_Ass constr
R27167:27169 Coq.Init.Logic <> :type_scope:x_'='_x not
R27131:27135 Imp <> aeval def
R27138:27143 Imp <> update def
R27151:27155 Imp <> aeval def
R27170:27174 Imp <> aeval def
R27167:27169 Coq.Init.Logic <> :type_scope:x_'='_x not
R27131:27135 Imp <> aeval def
R27138:27143 Imp <> update def
R27151:27155 Imp <> aeval def
R27170:27174 Imp <> aeval def
R27194:27208 Equiv <> aeval_weakening thm
R27194:27208 Equiv <> aeval_weakening thm
R27244:27252 Imp <> update_eq thm
R27244:27252 Imp <> update_eq thm
R27263:27267 Imp <> E_Ass constr
R27263:27267 Imp <> E_Ass constr
R27285:27285 Imp <> ::x_'/'_x_'||'_x not
R27297:27300 Imp <> ::x_'/'_x_'||'_x not
R27305:27308 Imp <> ::x_'/'_x_'||'_x not
R27288:27292 Imp <> ::x_'::='_x not
R27309:27314 Imp <> update def
R27330:27334 Imp <> aeval def
R27342:27351 Equiv <> subst_aexp def
R27285:27285 Imp <> ::x_'/'_x_'||'_x not
R27297:27300 Imp <> ::x_'/'_x_'||'_x not
R27305:27308 Imp <> ::x_'/'_x_'||'_x not
R27288:27292 Imp <> ::x_'::='_x not
R27309:27314 Imp <> update def
R27330:27334 Imp <> aeval def
R27342:27351 Equiv <> subst_aexp def
R27390:27394 Imp <> E_Seq constr
R27390:27394 Imp <> E_Seq constr
R27419:27423 Imp <> E_Ass constr
R27419:27423 Imp <> E_Ass constr
R27438:27442 Imp <> E_Ass constr
R27438:27442 Imp <> E_Ass constr
R27460:27460 Imp <> ::x_'/'_x_'||'_x not
R27472:27475 Imp <> ::x_'/'_x_'||'_x not
R27480:27483 Imp <> ::x_'/'_x_'||'_x not
R27463:27467 Imp <> ::x_'::='_x not
R27484:27489 Imp <> update def
R27505:27509 Imp <> aeval def
R27517:27526 Equiv <> subst_aexp def
R27460:27460 Imp <> ::x_'/'_x_'||'_x not
R27472:27475 Imp <> ::x_'/'_x_'||'_x not
R27480:27483 Imp <> ::x_'/'_x_'||'_x not
R27463:27467 Imp <> ::x_'::='_x not
R27484:27489 Imp <> update def
R27505:27509 Imp <> aeval def
R27517:27526 Equiv <> subst_aexp def
R27565:27569 Imp <> E_Seq constr
R27565:27569 Imp <> E_Seq constr
R27594:27598 Imp <> E_Ass constr
R27594:27598 Imp <> E_Ass constr
R27613:27617 Imp <> E_Ass constr
R27613:27617 Imp <> E_Ass constr
R27676:27680 Imp <> E_Ass constr
R27676:27680 Imp <> E_Ass constr
R27714:27716 Coq.Init.Logic <> :type_scope:x_'='_x not
R27699:27703 Imp <> aeval def
R27717:27721 Imp <> aeval def
R27729:27738 Equiv <> subst_aexp def
R27714:27716 Coq.Init.Logic <> :type_scope:x_'='_x not
R27699:27703 Imp <> aeval def
R27717:27721 Imp <> aeval def
R27729:27738 Equiv <> subst_aexp def
R27779:27787 Imp <> update_eq thm
R27779:27787 Imp <> update_eq thm
R27839:27847 Imp <> update_eq thm
R27839:27847 Imp <> update_eq thm
R27916:27918 Coq.Init.Logic <> :type_scope:x_'='_x not
R27901:27905 Imp <> aeval def
R27919:27923 Imp <> aeval def
R27931:27940 Equiv <> subst_aexp def
R27916:27918 Coq.Init.Logic <> :type_scope:x_'='_x not
R27901:27905 Imp <> aeval def
R27919:27923 Imp <> aeval def
R27931:27940 Equiv <> subst_aexp def
R27981:27989 Imp <> update_eq thm
R27981:27989 Imp <> update_eq thm
R28041:28049 Imp <> update_eq thm
R28041:28049 Imp <> update_eq thm
R28142:28142 Imp <> ::x_'/'_x_'||'_x not
R28154:28157 Imp <> ::x_'/'_x_'||'_x not
R28162:28165 Imp <> ::x_'/'_x_'||'_x not
R28145:28149 Imp <> ::x_'::='_x not
R28166:28171 Imp <> update def
R28187:28191 Imp <> aeval def
R28199:28208 Equiv <> subst_aexp def
R28142:28142 Imp <> ::x_'/'_x_'||'_x not
R28154:28157 Imp <> ::x_'/'_x_'||'_x not
R28162:28165 Imp <> ::x_'/'_x_'||'_x not
R28145:28149 Imp <> ::x_'::='_x not
R28166:28171 Imp <> update def
R28187:28191 Imp <> aeval def
R28199:28208 Equiv <> subst_aexp def
R28247:28251 Imp <> E_Seq constr
R28247:28251 Imp <> E_Seq constr
R28276:28280 Imp <> E_Ass constr
R28276:28280 Imp <> E_Ass constr
R28295:28299 Imp <> E_Ass constr
R28295:28299 Imp <> E_Ass constr
R28317:28317 Imp <> ::x_'/'_x_'||'_x not
R28329:28332 Imp <> ::x_'/'_x_'||'_x not
R28337:28340 Imp <> ::x_'/'_x_'||'_x not
R28320:28324 Imp <> ::x_'::='_x not
R28341:28346 Imp <> update def
R28362:28366 Imp <> aeval def
R28374:28383 Equiv <> subst_aexp def
R28317:28317 Imp <> ::x_'/'_x_'||'_x not
R28329:28332 Imp <> ::x_'/'_x_'||'_x not
R28337:28340 Imp <> ::x_'/'_x_'||'_x not
R28320:28324 Imp <> ::x_'::='_x not
R28341:28346 Imp <> update def
R28362:28366 Imp <> aeval def
R28374:28383 Equiv <> subst_aexp def
R28422:28426 Imp <> E_Seq constr
R28422:28426 Imp <> E_Seq constr
R28451:28455 Imp <> E_Ass constr
R28451:28455 Imp <> E_Ass constr
R28470:28474 Imp <> E_Ass constr
R28470:28474 Imp <> E_Ass constr
R28533:28537 Imp <> E_Ass constr
R28533:28537 Imp <> E_Ass constr
R28571:28573 Coq.Init.Logic <> :type_scope:x_'='_x not
R28556:28560 Imp <> aeval def
R28574:28578 Imp <> aeval def
R28586:28595 Equiv <> subst_aexp def
R28571:28573 Coq.Init.Logic <> :type_scope:x_'='_x not
R28556:28560 Imp <> aeval def
R28574:28578 Imp <> aeval def
R28586:28595 Equiv <> subst_aexp def
R28636:28644 Imp <> update_eq thm
R28636:28644 Imp <> update_eq thm
R28696:28704 Imp <> update_eq thm
R28696:28704 Imp <> update_eq thm
R28773:28775 Coq.Init.Logic <> :type_scope:x_'='_x not
R28758:28762 Imp <> aeval def
R28776:28780 Imp <> aeval def
R28788:28797 Equiv <> subst_aexp def
R28773:28775 Coq.Init.Logic <> :type_scope:x_'='_x not
R28758:28762 Imp <> aeval def
R28776:28780 Imp <> aeval def
R28788:28797 Equiv <> subst_aexp def
R28838:28846 Imp <> update_eq thm
R28838:28846 Imp <> update_eq thm
R28898:28906 Imp <> update_eq thm
R28898:28906 Imp <> update_eq thm
R28999:28999 Imp <> ::x_'/'_x_'||'_x not
R29011:29014 Imp <> ::x_'/'_x_'||'_x not
R29019:29022 Imp <> ::x_'/'_x_'||'_x not
R29002:29006 Imp <> ::x_'::='_x not
R29023:29028 Imp <> update def
R29044:29048 Imp <> aeval def
R29056:29065 Equiv <> subst_aexp def
R28999:28999 Imp <> ::x_'/'_x_'||'_x not
R29011:29014 Imp <> ::x_'/'_x_'||'_x not
R29019:29022 Imp <> ::x_'/'_x_'||'_x not
R29002:29006 Imp <> ::x_'::='_x not
R29023:29028 Imp <> update def
R29044:29048 Imp <> aeval def
R29056:29065 Equiv <> subst_aexp def
R29104:29108 Imp <> E_Seq constr
R29104:29108 Imp <> E_Seq constr
R29133:29137 Imp <> E_Ass constr
R29133:29137 Imp <> E_Ass constr
R29152:29156 Imp <> E_Ass constr
R29152:29156 Imp <> E_Ass constr
R29174:29174 Imp <> ::x_'/'_x_'||'_x not
R29186:29189 Imp <> ::x_'/'_x_'||'_x not
R29194:29197 Imp <> ::x_'/'_x_'||'_x not
R29177:29181 Imp <> ::x_'::='_x not
R29198:29203 Imp <> update def
R29219:29223 Imp <> aeval def
R29231:29240 Equiv <> subst_aexp def
R29174:29174 Imp <> ::x_'/'_x_'||'_x not
R29186:29189 Imp <> ::x_'/'_x_'||'_x not
R29194:29197 Imp <> ::x_'/'_x_'||'_x not
R29177:29181 Imp <> ::x_'::='_x not
R29198:29203 Imp <> update def
R29219:29223 Imp <> aeval def
R29231:29240 Equiv <> subst_aexp def
R29279:29283 Imp <> E_Seq constr
R29279:29283 Imp <> E_Seq constr
R29308:29312 Imp <> E_Ass constr
R29308:29312 Imp <> E_Ass constr
R29327:29331 Imp <> E_Ass constr
R29327:29331 Imp <> E_Ass constr
R29390:29394 Imp <> E_Ass constr
R29390:29394 Imp <> E_Ass constr
R29428:29430 Coq.Init.Logic <> :type_scope:x_'='_x not
R29413:29417 Imp <> aeval def
R29431:29435 Imp <> aeval def
R29443:29452 Equiv <> subst_aexp def
R29428:29430 Coq.Init.Logic <> :type_scope:x_'='_x not
R29413:29417 Imp <> aeval def
R29431:29435 Imp <> aeval def
R29443:29452 Equiv <> subst_aexp def
R29493:29501 Imp <> update_eq thm
R29493:29501 Imp <> update_eq thm
R29553:29561 Imp <> update_eq thm
R29553:29561 Imp <> update_eq thm
R29630:29632 Coq.Init.Logic <> :type_scope:x_'='_x not
R29615:29619 Imp <> aeval def
R29633:29637 Imp <> aeval def
R29645:29654 Equiv <> subst_aexp def
R29630:29632 Coq.Init.Logic <> :type_scope:x_'='_x not
R29615:29619 Imp <> aeval def
R29633:29637 Imp <> aeval def
R29645:29654 Equiv <> subst_aexp def
R29695:29703 Imp <> update_eq thm
R29695:29703 Imp <> update_eq thm
R29755:29763 Imp <> update_eq thm
R29755:29763 Imp <> update_eq thm
prf 29863:29878 <> inequiv_exercise
R29883:29884 Coq.Init.Logic <> :type_scope:'~'_x not
R29885:29890 Equiv <> cequiv def
R29918:29921 Imp <> ::'SKIP' not
R29893:29898 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29904:29907 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29912:29915 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R29899:29903 Imp <> BTrue constr
R29908:29911 Imp <> ::'SKIP' not
R29957:29962 Equiv <> cequiv def
R29995:29999 Imp <> state def
R30006:30008 Imp <> ::x_'/'_x_'||'_x not
R30011:30014 Imp <> ::x_'/'_x_'||'_x not
R30002:30005 Imp <> ::'SKIP' not
R30009:30010 Equiv <> st var
R30015:30016 Equiv <> st var
R29995:29999 Imp <> state def
R30006:30008 Imp <> ::x_'/'_x_'||'_x not
R30011:30014 Imp <> ::x_'/'_x_'||'_x not
R30002:30005 Imp <> ::'SKIP' not
R30009:30010 Equiv <> st var
R30015:30016 Equiv <> st var
R30038:30043 Imp <> E_Skip constr
R30038:30043 Imp <> E_Skip constr
R30066:30070 Imp <> state def
R30073:30073 Imp <> ::x_'/'_x_'||'_x not
R30097:30100 Imp <> ::x_'/'_x_'||'_x not
R30103:30106 Imp <> ::x_'/'_x_'||'_x not
R30074:30079 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30085:30088 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30093:30096 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30080:30084 Imp <> BTrue constr
R30089:30092 Imp <> ::'SKIP' not
R30101:30102 Equiv <> st var
R30107:30108 Equiv <> st var
R30066:30070 Imp <> state def
R30073:30073 Imp <> ::x_'/'_x_'||'_x not
R30097:30100 Imp <> ::x_'/'_x_'||'_x not
R30103:30106 Imp <> ::x_'/'_x_'||'_x not
R30074:30079 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30085:30088 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30093:30096 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30080:30084 Imp <> BTrue constr
R30089:30092 Imp <> ::'SKIP' not
R30101:30102 Equiv <> st var
R30107:30108 Equiv <> st var
R30167:30171 Imp <> state def
R30174:30175 Coq.Init.Logic <> :type_scope:'~'_x not
R30212:30212 Coq.Init.Logic <> :type_scope:'~'_x not
R30176:30176 Imp <> ::x_'/'_x_'||'_x not
R30200:30203 Imp <> ::x_'/'_x_'||'_x not
R30206:30209 Imp <> ::x_'/'_x_'||'_x not
R30177:30182 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30188:30191 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30196:30199 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30183:30187 Imp <> BTrue constr
R30192:30195 Imp <> ::'SKIP' not
R30204:30205 Equiv <> st var
R30210:30211 Equiv <> st var
R30167:30171 Imp <> state def
R30174:30175 Coq.Init.Logic <> :type_scope:'~'_x not
R30212:30212 Coq.Init.Logic <> :type_scope:'~'_x not
R30176:30176 Imp <> ::x_'/'_x_'||'_x not
R30200:30203 Imp <> ::x_'/'_x_'||'_x not
R30206:30209 Imp <> ::x_'/'_x_'||'_x not
R30177:30182 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30188:30191 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30196:30199 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30183:30187 Imp <> BTrue constr
R30192:30195 Imp <> ::'SKIP' not
R30204:30205 Equiv <> st var
R30210:30211 Equiv <> st var
R30234:30249 Imp <> loop_never_stops thm
R30234:30249 Imp <> loop_never_stops thm
R30319:30323 Coq.Init.Logic <> False ind
R30261:30261 Imp <> ::x_'/'_x_'||'_x not
R30285:30288 Imp <> ::x_'/'_x_'||'_x not
R30300:30303 Imp <> ::x_'/'_x_'||'_x not
R30262:30267 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30273:30276 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30281:30284 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30268:30272 Imp <> BTrue constr
R30277:30280 Imp <> ::'SKIP' not
R30289:30299 Imp <> empty_state def
R30304:30314 Imp <> empty_state def
R30319:30323 Coq.Init.Logic <> False ind
R30261:30261 Imp <> ::x_'/'_x_'||'_x not
R30285:30288 Imp <> ::x_'/'_x_'||'_x not
R30300:30303 Imp <> ::x_'/'_x_'||'_x not
R30262:30267 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30273:30276 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30281:30284 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30268:30272 Imp <> BTrue constr
R30277:30280 Imp <> ::'SKIP' not
R30289:30299 Imp <> empty_state def
R30304:30314 Imp <> empty_state def
mod 30374:30377 <> Himp
ind 30391:30393 Himp com
constr 30409:30413 Himp CSkip
constr 30425:30428 Himp CAss
constr 30454:30457 Himp CSeq
constr 30483:30485 Himp CIf
constr 30519:30524 Himp CWhile
constr 30551:30556 Himp CHavoc
R30417:30419 Equiv <> com ind
R30446:30448 Equiv <> com ind
R30438:30441 Imp <> aexp ind
R30432:30433 SfLib <> id ind
R30475:30477 Equiv <> com ind
R30468:30470 Equiv <> com ind
R30461:30463 Equiv <> com ind
R30511:30513 Equiv <> com ind
R30504:30506 Equiv <> com ind
R30497:30499 Equiv <> com ind
R30489:30492 Imp <> bexp ind
R30543:30545 Equiv <> com ind
R30536:30538 Equiv <> com ind
R30528:30531 Imp <> bexp ind
R30566:30568 Equiv <> com ind
R30560:30561 SfLib <> id ind
R30784:30788 Equiv Himp CSkip constr
not 30770 Himp ::'SKIP'
R30818:30821 Equiv Himp CAss constr
not 30800 Himp ::x_'::='_x
R30869:30872 Equiv Himp CSeq constr
not 30852 Himp ::x_';;'_x
R30957:30962 Equiv Himp CWhile constr
not 30926 Himp ::'WHILE'_x_'DO'_x_'END'
R31056:31058 Equiv Himp CIf constr
not 31014 Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI'
R31131:31136 Equiv Himp CHavoc constr
not 31115 Himp ::'HAVOC'_x
ind 31238:31242 Himp ceval
constr 31283:31288 Himp E_Skip
constr 31331:31335 Himp E_Ass
constr 31459:31463 Himp E_Seq
constr 31589:31596 Himp E_IfTrue
constr 31765:31773 Himp E_IfFalse
constr 31945:31954 Himp E_WhileEnd
constr 32078:32088 Himp E_WhileLoop
constr 32333:32339 Himp E_Havoc
R31262:31266 Imp <> state def
R31253:31257 Imp <> state def
R31246:31248 Equiv Himp com ind
R32460:32464 Equiv <> ceval ind
R31304:31308 Imp <> state def
R31315:31317 Equiv Himp ::x_'/'_x_'||'_x not
R31320:31323 Equiv Himp ::x_'/'_x_'||'_x not
R31311:31314 Equiv Himp ::'SKIP' not
R31318:31319 Equiv <> st var
R31324:31325 Equiv <> st var
R31352:31356 Imp <> state def
R31365:31368 Imp <> aexp ind
R31376:31378 Coq.Init.Datatypes <> nat ind
R31386:31387 SfLib <> id ind
R31422:31422 Equiv Himp ::x_'/'_x_'||'_x not
R31431:31434 Equiv Himp ::x_'/'_x_'||'_x not
R31437:31440 Equiv Himp ::x_'/'_x_'||'_x not
R31424:31428 Equiv Himp ::x_'::='_x not
R31423:31423 Equiv <> X var
R31429:31430 Equiv <> a1 var
R31435:31436 Equiv <> st var
R31441:31446 Imp <> update def
R31453:31453 Equiv <> n var
R31451:31451 Equiv <> X var
R31448:31449 Equiv <> st var
R31414:31416 Coq.Init.Logic <> :type_scope:x_'='_x not
R31403:31407 Imp <> aeval def
R31412:31413 Equiv <> a1 var
R31409:31410 Equiv <> st var
R31417:31417 Equiv <> n var
R31483:31485 Equiv Himp com ind
R31503:31507 Imp <> state def
R31561:31561 Equiv Himp ::x_'/'_x_'||'_x not
R31570:31573 Equiv Himp ::x_'/'_x_'||'_x not
R31576:31579 Equiv Himp ::x_'/'_x_'||'_x not
R31564:31567 Equiv Himp ::x_';;'_x not
R31562:31563 Equiv <> c1 var
R31568:31569 Equiv <> c2 var
R31574:31575 Equiv <> st var
R31580:31583 Equiv <> st'' var
R31543:31545 Equiv Himp ::x_'/'_x_'||'_x not
R31549:31552 Equiv Himp ::x_'/'_x_'||'_x not
R31541:31542 Equiv <> c2 var
R31546:31548 Equiv <> st' var
R31553:31556 Equiv <> st'' var
R31525:31527 Equiv Himp ::x_'/'_x_'||'_x not
R31530:31533 Equiv Himp ::x_'/'_x_'||'_x not
R31523:31524 Equiv <> c1 var
R31528:31529 Equiv <> st var
R31534:31536 Equiv <> st' var
R31617:31621 Imp <> state def
R31630:31633 Imp <> bexp ind
R31645:31647 Equiv Himp com ind
R31721:31721 Equiv Himp ::x_'/'_x_'||'_x not
R31747:31750 Equiv Himp ::x_'/'_x_'||'_x not
R31753:31756 Equiv Himp ::x_'/'_x_'||'_x not
R31722:31725 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31728:31733 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31736:31741 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31744:31746 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31726:31727 Equiv <> b1 var
R31734:31735 Equiv <> c1 var
R31742:31743 Equiv <> c2 var
R31751:31752 Equiv <> st var
R31757:31759 Equiv <> st' var
R31705:31707 Equiv Himp ::x_'/'_x_'||'_x not
R31710:31713 Equiv Himp ::x_'/'_x_'||'_x not
R31703:31704 Equiv <> c1 var
R31708:31709 Equiv <> st var
R31714:31716 Equiv <> st' var
R31677:31679 Coq.Init.Logic <> :type_scope:x_'='_x not
R31666:31670 Imp <> beval def
R31675:31676 Equiv <> b1 var
R31672:31673 Equiv <> st var
R31680:31683 Coq.Init.Datatypes <> true constr
R31794:31798 Imp <> state def
R31807:31810 Imp <> bexp ind
R31822:31824 Equiv Himp com ind
R31901:31901 Equiv Himp ::x_'/'_x_'||'_x not
R31927:31930 Equiv Himp ::x_'/'_x_'||'_x not
R31933:31936 Equiv Himp ::x_'/'_x_'||'_x not
R31902:31905 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31908:31913 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31916:31921 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31924:31926 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31906:31907 Equiv <> b1 var
R31914:31915 Equiv <> c1 var
R31922:31923 Equiv <> c2 var
R31931:31932 Equiv <> st var
R31937:31939 Equiv <> st' var
R31885:31887 Equiv Himp ::x_'/'_x_'||'_x not
R31890:31893 Equiv Himp ::x_'/'_x_'||'_x not
R31883:31884 Equiv <> c2 var
R31888:31889 Equiv <> st var
R31894:31896 Equiv <> st' var
R31855:31857 Coq.Init.Logic <> :type_scope:x_'='_x not
R31844:31848 Imp <> beval def
R31853:31854 Equiv <> b1 var
R31850:31851 Equiv <> st var
R31858:31862 Coq.Init.Datatypes <> false constr
R31971:31974 Imp <> bexp ind
R31983:31987 Imp <> state def
R31996:31998 Equiv Himp com ind
R32042:32042 Equiv Himp ::x_'/'_x_'||'_x not
R32061:32064 Equiv Himp ::x_'/'_x_'||'_x not
R32067:32070 Equiv Himp ::x_'/'_x_'||'_x not
R32043:32048 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R32051:32054 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R32057:32060 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R32049:32050 Equiv <> b1 var
R32055:32056 Equiv <> c1 var
R32065:32066 Equiv <> st var
R32071:32072 Equiv <> st var
R32030:32032 Coq.Init.Logic <> :type_scope:x_'='_x not
R32019:32023 Imp <> beval def
R32028:32029 Equiv <> b1 var
R32025:32026 Equiv <> st var
R32033:32037 Coq.Init.Datatypes <> false constr
R32114:32118 Imp <> state def
R32127:32130 Imp <> bexp ind
R32139:32141 Equiv Himp com ind
R32295:32295 Equiv Himp ::x_'/'_x_'||'_x not
R32314:32317 Equiv Himp ::x_'/'_x_'||'_x not
R32320:32323 Equiv Himp ::x_'/'_x_'||'_x not
R32296:32301 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R32304:32307 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R32310:32313 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R32302:32303 Equiv <> b1 var
R32308:32309 Equiv <> c1 var
R32318:32319 Equiv <> st var
R32324:32327 Equiv <> st'' var
R32239:32239 Equiv Himp ::x_'/'_x_'||'_x not
R32258:32261 Equiv Himp ::x_'/'_x_'||'_x not
R32265:32268 Equiv Himp ::x_'/'_x_'||'_x not
R32240:32245 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R32248:32251 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R32254:32257 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R32246:32247 Equiv <> b1 var
R32252:32253 Equiv <> c1 var
R32262:32264 Equiv <> st' var
R32269:32272 Equiv <> st'' var
R32205:32207 Equiv Himp ::x_'/'_x_'||'_x not
R32210:32213 Equiv Himp ::x_'/'_x_'||'_x not
R32203:32204 Equiv <> c1 var
R32208:32209 Equiv <> st var
R32214:32216 Equiv <> st' var
R32174:32176 Coq.Init.Logic <> :type_scope:x_'='_x not
R32163:32167 Imp <> beval def
R32172:32173 Equiv <> b1 var
R32169:32170 Equiv <> st var
R32177:32180 Coq.Init.Datatypes <> true constr
R32356:32360 Imp <> state def
R32368:32370 Coq.Init.Datatypes <> nat ind
R32378:32379 SfLib <> id ind
R32395:32395 Equiv Himp ::x_'/'_x_'||'_x not
R32403:32406 Equiv Himp ::x_'/'_x_'||'_x not
R32409:32412 Equiv Himp ::x_'/'_x_'||'_x not
R32396:32401 Equiv Himp ::'HAVOC'_x not
R32402:32402 Equiv <> X var
R32407:32408 Equiv <> st var
R32413:32418 Imp <> update def
R32425:32425 Equiv <> n var
R32423:32423 Equiv <> X var
R32420:32421 Equiv <> st var
R32460:32464 Equiv Himp ceval ind
not 32435 Himp ::x_'/'_x_'||'_x
def 32753:32766 Himp havoc_example1
R32770:32770 Equiv Himp ::x_'/'_x_'||'_x not
R32778:32781 Equiv Himp ::x_'/'_x_'||'_x not
R32793:32796 Equiv Himp ::x_'/'_x_'||'_x not
R32771:32776 Equiv Himp ::'HAVOC'_x not
R32777:32777 Imp <> X def
R32782:32792 Imp <> empty_state def
R32797:32802 Imp <> update def
R32816:32816 Imp <> X def
R32804:32814 Imp <> empty_state def
R32836:32842 Equiv Himp E_Havoc constr
R32836:32842 Equiv Himp E_Havoc constr
def 32859:32872 Himp havoc_example2
R32878:32878 Equiv Himp ::x_'/'_x_'||'_x not
R32893:32896 Equiv Himp ::x_'/'_x_'||'_x not
R32908:32911 Equiv Himp ::x_'/'_x_'||'_x not
R32883:32885 Equiv Himp ::x_';;'_x not
R32879:32882 Equiv Himp ::'SKIP' not
R32886:32891 Equiv Himp ::'HAVOC'_x not
R32892:32892 Imp <> Z def
R32897:32907 Imp <> empty_state def
R32912:32917 Imp <> update def
R32931:32931 Imp <> Z def
R32919:32929 Imp <> empty_state def
R32963:32973 Imp <> empty_state def
R32952:32956 Equiv Himp E_Seq constr
R32963:32973 Imp <> empty_state def
R32952:32956 Equiv Himp E_Seq constr
R32986:32991 Equiv Himp E_Skip constr
R32986:32991 Equiv Himp E_Skip constr
R33004:33010 Equiv Himp E_Havoc constr
R33004:33010 Equiv Himp E_Havoc constr
def 33032:33037 Himp cequiv
R33048:33050 Equiv Himp com ind
R33079:33083 Imp <> state def
R33102:33106 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R33090:33092 Equiv Himp ::x_'/'_x_'||'_x not
R33095:33098 Equiv Himp ::x_'/'_x_'||'_x not
R33088:33089 Equiv <> c1 var
R33093:33094 Equiv <> st var
R33099:33101 Equiv <> st' var
R33109:33111 Equiv Himp ::x_'/'_x_'||'_x not
R33114:33117 Equiv Himp ::x_'/'_x_'||'_x not
R33107:33108 Equiv <> c2 var
R33112:33113 Equiv <> st var
R33118:33120 Equiv <> st' var
def 33135:33137 Himp pXY
R33151:33153 Equiv Himp ::x_';;'_x not
R33144:33149 Equiv Himp ::'HAVOC'_x not
R33150:33150 Imp <> X def
R33154:33159 Equiv Himp ::'HAVOC'_x not
R33160:33160 Imp <> Y def
def 33175:33177 Himp pYX
R33191:33193 Equiv Himp ::x_';;'_x not
R33184:33189 Equiv Himp ::'HAVOC'_x not
R33190:33190 Imp <> Y def
R33194:33199 Equiv Himp ::'HAVOC'_x not
R33200:33200 Imp <> X def
prf 33212:33222 Himp update_swap
R33280:33282 Coq.Init.Logic <> :type_scope:x_'='_x not
R33253:33258 Imp <> update def
R33278:33279 Equiv <> n0 var
R33276:33276 Equiv <> Y var
R33261:33266 Imp <> update def
R33273:33273 Equiv <> n var
R33271:33271 Equiv <> X var
R33268:33269 Equiv <> st var
R33283:33288 Imp <> update def
R33309:33309 Equiv <> n var
R33307:33307 Equiv <> X var
R33291:33296 Imp <> update def
R33303:33304 Equiv <> n0 var
R33301:33301 Equiv <> Y var
R33298:33299 Equiv <> st var
R33248:33249 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R33247:33247 Equiv <> X var
R33250:33250 Equiv <> Y var
R33335:33359 Equiv Himp functional_extensionality prfax
R33335:33359 Equiv Himp functional_extensionality prfax
R33388:33393 Imp <> update def
R33408:33416 SfLib <> eq_id_dec thm
R33408:33416 SfLib <> eq_id_dec thm
R33446:33454 SfLib <> eq_id_dec thm
R33446:33454 SfLib <> eq_id_dec thm
R33492:33494 Coq.Init.Logic <> not def
R33511:33511 Coq.Init.Logic <> :type_scope:x_'='_x not
R33511:33511 Coq.Init.Logic <> :type_scope:x_'='_x not
prf 33571:33584 Himp pXY_cequiv_pYX
R33604:33607 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R33590:33595 Equiv Himp cequiv def
R33601:33603 Equiv Himp pYX def
R33597:33599 Equiv Himp pXY def
R33608:33608 Coq.Init.Logic <> :type_scope:'~'_x not
R33609:33614 Equiv Himp cequiv def
R33620:33622 Equiv Himp pYX def
R33616:33618 Equiv Himp pXY def
R33640:33648 Coq.Init.Logic <> or_introl constr
R33640:33648 Coq.Init.Logic <> or_introl constr
R33763:33771 SfLib <> eq_id_dec thm
R33775:33775 Imp <> Y def
R33773:33773 Imp <> X def
R33814:33824 Equiv Himp update_swap thm
R33763:33771 SfLib <> eq_id_dec thm
R33775:33775 Imp <> Y def
R33773:33773 Imp <> X def
R33763:33771 SfLib <> eq_id_dec thm
R33775:33775 Imp <> Y def
R33773:33773 Imp <> X def
R33814:33824 Equiv Himp update_swap thm
R33814:33824 Equiv Himp update_swap thm
R33853:33858 Imp <> update def
R33863:33863 Imp <> Y def
R33841:33845 Equiv Himp E_Seq constr
R33880:33886 Equiv Himp E_Havoc constr
R33853:33858 Imp <> update def
R33863:33863 Imp <> Y def
R33841:33845 Equiv Himp E_Seq constr
R33880:33886 Equiv Himp E_Havoc constr
R33880:33886 Equiv Himp E_Havoc constr
R33909:33914 Imp <> update def
R33919:33919 Imp <> X def
R33897:33901 Equiv Himp E_Seq constr
R33936:33942 Equiv Himp E_Havoc constr
R33909:33914 Imp <> update def
R33919:33919 Imp <> X def
R33897:33901 Equiv Himp E_Seq constr
R33936:33942 Equiv Himp E_Havoc constr
R33936:33942 Equiv Himp E_Havoc constr
def 33964:33969 Himp ptwice
R33983:33985 Equiv Himp ::x_';;'_x not
R33976:33981 Equiv Himp ::'HAVOC'_x not
R33982:33982 Imp <> X def
R33986:33991 Equiv Himp ::'HAVOC'_x not
R33992:33992 Imp <> Y def
def 34007:34011 Himp pcopy
R34025:34027 Equiv Himp ::x_';;'_x not
R34018:34023 Equiv Himp ::'HAVOC'_x not
R34024:34024 Imp <> X def
R34029:34033 Equiv Himp ::x_'::='_x not
R34028:34028 Imp <> Y def
R34034:34036 Imp <> AId constr
R34038:34038 Imp <> X def
prf 34050:34068 Himp ptwice_cequiv_pcopy
R34093:34096 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R34074:34079 Equiv Himp cequiv def
R34088:34092 Equiv Himp pcopy def
R34081:34086 Equiv Himp ptwice def
R34097:34097 Coq.Init.Logic <> :type_scope:'~'_x not
R34098:34103 Equiv Himp cequiv def
R34112:34116 Equiv Himp pcopy def
R34105:34110 Equiv Himp ptwice def
R34134:34142 Coq.Init.Logic <> or_intror constr
R34134:34142 Coq.Init.Logic <> or_intror constr
R34154:34156 Coq.Init.Logic <> not def
R34175:34180 Equiv Himp cequiv def
R34260:34268 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R34203:34205 Equiv Himp ::x_'/'_x_'||'_x not
R34217:34220 Equiv Himp ::x_'/'_x_'||'_x not
R34197:34202 Equiv Himp ptwice def
R34206:34216 Imp <> empty_state def
R34221:34226 Imp <> update def
R34256:34256 Coq.Init.Datatypes <> S constr
R34253:34253 Imp <> Y def
R34229:34234 Imp <> update def
R34248:34248 Imp <> X def
R34236:34246 Imp <> empty_state def
R34274:34276 Equiv Himp ::x_'/'_x_'||'_x not
R34288:34291 Equiv Himp ::x_'/'_x_'||'_x not
R34269:34273 Equiv Himp pcopy def
R34277:34287 Imp <> empty_state def
R34292:34297 Imp <> update def
R34327:34327 Coq.Init.Datatypes <> S constr
R34324:34324 Imp <> Y def
R34300:34305 Imp <> update def
R34319:34319 Imp <> X def
R34307:34317 Imp <> empty_state def
R34260:34268 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R34203:34205 Equiv Himp ::x_'/'_x_'||'_x not
R34217:34220 Equiv Himp ::x_'/'_x_'||'_x not
R34197:34202 Equiv Himp ptwice def
R34206:34216 Imp <> empty_state def
R34221:34226 Imp <> update def
R34256:34256 Coq.Init.Datatypes <> S constr
R34253:34253 Imp <> Y def
R34229:34234 Imp <> update def
R34248:34248 Imp <> X def
R34236:34246 Imp <> empty_state def
R34274:34276 Equiv Himp ::x_'/'_x_'||'_x not
R34288:34291 Equiv Himp ::x_'/'_x_'||'_x not
R34269:34273 Equiv Himp pcopy def
R34277:34287 Imp <> empty_state def
R34292:34297 Imp <> update def
R34327:34327 Coq.Init.Datatypes <> S constr
R34324:34324 Imp <> Y def
R34300:34305 Imp <> update def
R34319:34319 Imp <> X def
R34307:34317 Imp <> empty_state def
R34366:34374 SfLib <> eq_id_dec thm
R34378:34378 Imp <> Y def
R34376:34376 Imp <> X def
R34366:34374 SfLib <> eq_id_dec thm
R34378:34378 Imp <> Y def
R34376:34376 Imp <> X def
R34464:34466 Equiv Himp ::x_'/'_x_'||'_x not
R34478:34481 Equiv Himp ::x_'/'_x_'||'_x not
R34459:34463 Equiv Himp pcopy def
R34467:34477 Imp <> empty_state def
R34482:34487 Imp <> update def
R34514:34514 Imp <> Y def
R34490:34495 Imp <> update def
R34509:34509 Imp <> X def
R34497:34507 Imp <> empty_state def
R34464:34466 Equiv Himp ::x_'/'_x_'||'_x not
R34478:34481 Equiv Himp ::x_'/'_x_'||'_x not
R34459:34463 Equiv Himp pcopy def
R34467:34477 Imp <> empty_state def
R34482:34487 Imp <> update def
R34514:34514 Imp <> Y def
R34490:34495 Imp <> update def
R34509:34509 Imp <> X def
R34497:34507 Imp <> empty_state def
R34550:34555 Imp <> update def
R34569:34569 Imp <> X def
R34557:34567 Imp <> empty_state def
R34538:34542 Equiv Himp E_Seq constr
R34585:34591 Equiv Himp E_Havoc constr
R34550:34555 Imp <> update def
R34569:34569 Imp <> X def
R34557:34567 Imp <> empty_state def
R34538:34542 Equiv Himp E_Seq constr
R34585:34591 Equiv Himp E_Havoc constr
R34585:34591 Equiv Himp E_Havoc constr
R34625:34625 Equiv Himp ::x_'/'_x_'||'_x not
R34633:34636 Equiv Himp ::x_'/'_x_'||'_x not
R34648:34651 Equiv Himp ::x_'/'_x_'||'_x not
R34626:34631 Equiv Himp ::'HAVOC'_x not
R34632:34632 Imp <> X def
R34637:34647 Imp <> empty_state def
R34652:34657 Imp <> update def
R34671:34671 Imp <> X def
R34659:34669 Imp <> empty_state def
R34625:34625 Equiv Himp ::x_'/'_x_'||'_x not
R34633:34636 Equiv Himp ::x_'/'_x_'||'_x not
R34648:34651 Equiv Himp ::x_'/'_x_'||'_x not
R34626:34631 Equiv Himp ::'HAVOC'_x not
R34632:34632 Imp <> X def
R34637:34647 Imp <> empty_state def
R34652:34657 Imp <> update def
R34671:34671 Imp <> X def
R34659:34669 Imp <> empty_state def
R34687:34693 Equiv Himp E_Havoc constr
R34687:34693 Equiv Himp E_Havoc constr
R34865:34867 Coq.Init.Logic <> :type_scope:x_'='_x not
R34803:34808 Imp <> update def
R34864:34864 Imp <> Y def
R34838:34843 Imp <> update def
R34861:34861 Imp <> X def
R34857:34857 Imp <> X def
R34845:34855 Imp <> empty_state def
R34835:34835 Imp <> Y def
R34811:34816 Imp <> update def
R34830:34830 Imp <> X def
R34818:34828 Imp <> empty_state def
R34868:34873 Imp <> update def
R34904:34904 Imp <> Y def
R34900:34900 Imp <> Y def
R34876:34881 Imp <> update def
R34895:34895 Imp <> X def
R34883:34893 Imp <> empty_state def
R34865:34867 Coq.Init.Logic <> :type_scope:x_'='_x not
R34803:34808 Imp <> update def
R34864:34864 Imp <> Y def
R34838:34843 Imp <> update def
R34861:34861 Imp <> X def
R34857:34857 Imp <> X def
R34845:34855 Imp <> empty_state def
R34835:34835 Imp <> Y def
R34811:34816 Imp <> update def
R34830:34830 Imp <> X def
R34818:34828 Imp <> empty_state def
R34868:34873 Imp <> update def
R34904:34904 Imp <> Y def
R34900:34900 Imp <> Y def
R34876:34881 Imp <> update def
R34895:34895 Imp <> X def
R34883:34893 Imp <> empty_state def
R34938:34946 Imp <> update_eq thm
R34938:34946 Imp <> update_eq thm
R34963:34971 Imp <> update_eq thm
R34963:34971 Imp <> update_eq thm
R34992:35000 Imp <> update_eq thm
R34992:35000 Imp <> update_eq thm
R35106:35108 Coq.Init.Logic <> :type_scope:x_'='_x not
R35034:35039 Imp <> update def
R35105:35105 Imp <> X def
R35074:35079 Imp <> update def
R35102:35102 Imp <> X def
R35096:35096 Coq.Init.Datatypes <> S constr
R35093:35093 Imp <> X def
R35081:35091 Imp <> empty_state def
R35071:35071 Imp <> Y def
R35042:35047 Imp <> update def
R35064:35064 Coq.Init.Datatypes <> S constr
R35061:35061 Imp <> X def
R35049:35059 Imp <> empty_state def
R35109:35114 Imp <> update def
R35145:35145 Imp <> X def
R35141:35141 Imp <> Y def
R35117:35122 Imp <> update def
R35136:35136 Imp <> X def
R35124:35134 Imp <> empty_state def
R35106:35108 Coq.Init.Logic <> :type_scope:x_'='_x not
R35034:35039 Imp <> update def
R35105:35105 Imp <> X def
R35074:35079 Imp <> update def
R35102:35102 Imp <> X def
R35096:35096 Coq.Init.Datatypes <> S constr
R35093:35093 Imp <> X def
R35081:35091 Imp <> empty_state def
R35071:35071 Imp <> Y def
R35042:35047 Imp <> update def
R35064:35064 Coq.Init.Datatypes <> S constr
R35061:35061 Imp <> X def
R35049:35059 Imp <> empty_state def
R35109:35114 Imp <> update def
R35145:35145 Imp <> X def
R35141:35141 Imp <> Y def
R35117:35122 Imp <> update def
R35136:35136 Imp <> X def
R35124:35134 Imp <> empty_state def
R35179:35188 Imp <> update_neq thm
R35179:35188 Imp <> update_neq thm
R35211:35219 Imp <> update_eq thm
R35211:35219 Imp <> update_eq thm
R35240:35249 Imp <> update_neq thm
R35240:35249 Imp <> update_neq thm
R35272:35280 Imp <> update_eq thm
R35272:35280 Imp <> update_eq thm
def 35326:35327 Himp p1
R35331:35333 Equiv Himp com ind
R35340:35346 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R35374:35382 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R35425:35430 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R35347:35350 Imp <> BNot constr
R35353:35355 Imp <> BEq constr
R35366:35369 Imp <> ANum constr
R35358:35360 Imp <> AId constr
R35362:35362 Imp <> X def
R35390:35396 Equiv Himp ::x_';;'_x not
R35383:35388 Equiv Himp ::'HAVOC'_x not
R35389:35389 Imp <> Y def
R35398:35402 Equiv Himp ::x_'::='_x not
R35397:35397 Imp <> X def
R35403:35407 Imp <> APlus constr
R35418:35421 Imp <> ANum constr
R35410:35412 Imp <> AId constr
R35414:35414 Imp <> X def
def 35445:35446 Himp p2
R35450:35452 Equiv Himp com ind
R35459:35465 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R35493:35501 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R35506:35511 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R35466:35469 Imp <> BNot constr
R35472:35474 Imp <> BEq constr
R35485:35488 Imp <> ANum constr
R35477:35479 Imp <> AId constr
R35481:35481 Imp <> X def
R35502:35505 Equiv Himp ::'SKIP' not
prf 35523:35533 Himp p1_p2_equiv
R35537:35542 Equiv Himp cequiv def
R35547:35548 Equiv Himp p2 def
R35544:35545 Equiv Himp p1 def
R35597:35598 Equiv Himp p2 def
R35610:35611 Equiv Himp p1 def
R35631:35639 SfLib <> eq_id_dec thm
R35643:35643 Imp <> Y def
R35641:35641 Imp <> X def
R35631:35639 SfLib <> eq_id_dec thm
R35643:35643 Imp <> Y def
R35641:35641 Imp <> X def
R35705:35714 Equiv Himp E_WhileEnd constr
R35705:35714 Equiv Himp E_WhileEnd constr
R35735:35740 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R35768:35777 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R35816:35819 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R35741:35744 Imp <> BNot constr
R35747:35749 Imp <> BEq constr
R35760:35763 Imp <> ANum constr
R35752:35754 Imp <> AId constr
R35756:35756 Imp <> X def
R35785:35787 Equiv Himp ::x_';;'_x not
R35778:35783 Equiv Himp ::'HAVOC'_x not
R35784:35784 Imp <> Y def
R35789:35793 Equiv Himp ::x_'::='_x not
R35788:35788 Imp <> X def
R35794:35798 Imp <> APlus constr
R35809:35812 Imp <> ANum constr
R35801:35803 Imp <> AId constr
R35805:35805 Imp <> X def
R35735:35740 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R35768:35777 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R35816:35819 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R35741:35744 Imp <> BNot constr
R35747:35749 Imp <> BEq constr
R35760:35763 Imp <> ANum constr
R35752:35754 Imp <> AId constr
R35756:35756 Imp <> X def
R35785:35787 Equiv Himp ::x_';;'_x not
R35778:35783 Equiv Himp ::'HAVOC'_x not
R35784:35784 Imp <> Y def
R35789:35793 Equiv Himp ::x_'::='_x not
R35788:35788 Imp <> X def
R35794:35798 Imp <> APlus constr
R35809:35812 Imp <> ANum constr
R35801:35803 Imp <> AId constr
R35805:35805 Imp <> X def
R35853:35857 Coq.Init.Logic <> False ind
R35853:35857 Coq.Init.Logic <> False ind
R36100:36108 Imp <> update_eq thm
R36100:36108 Imp <> update_eq thm
R36119:36128 Imp <> update_neq thm
R36119:36128 Imp <> update_neq thm
R36167:36167 Imp <> X def
R36167:36167 Imp <> X def
R36231:36232 Equiv Himp p1 def
R36242:36243 Equiv Himp p2 def
R36266:36266 Imp <> X def
R36266:36266 Imp <> X def
R36329:36338 Equiv Himp E_WhileEnd constr
R36329:36338 Equiv Himp E_WhileEnd constr
R36431:36435 Coq.Init.Logic <> False ind
R36431:36435 Coq.Init.Logic <> False ind
R36455:36460 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R36488:36491 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R36496:36499 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R36461:36464 Imp <> BNot constr
R36467:36469 Imp <> BEq constr
R36480:36483 Imp <> ANum constr
R36472:36474 Imp <> AId constr
R36476:36476 Imp <> X def
R36492:36495 Equiv Himp ::'SKIP' not
R36455:36460 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R36488:36491 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R36496:36499 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R36461:36464 Imp <> BNot constr
R36467:36469 Imp <> BEq constr
R36480:36483 Imp <> ANum constr
R36472:36474 Imp <> AId constr
R36476:36476 Imp <> X def
R36492:36495 Equiv Himp ::'SKIP' not
def 36795:36796 Himp p3
R36800:36802 Equiv Himp com ind
R36821:36825 Equiv Himp ::x_';;'_x not
R36810:36814 Equiv Himp ::x_'::='_x not
R36809:36809 Imp <> Z def
R36815:36818 Imp <> ANum constr
R36826:36832 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R36860:36868 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R36890:36895 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R36833:36836 Imp <> BNot constr
R36839:36841 Imp <> BEq constr
R36852:36855 Imp <> ANum constr
R36844:36846 Imp <> AId constr
R36848:36848 Imp <> X def
R36876:36882 Equiv Himp ::x_';;'_x not
R36869:36874 Equiv Himp ::'HAVOC'_x not
R36875:36875 Imp <> X def
R36883:36888 Equiv Himp ::'HAVOC'_x not
R36889:36889 Imp <> Z def
def 36910:36911 Himp p4
R36915:36917 Equiv Himp com ind
R36938:36942 Equiv Himp ::x_';;'_x not
R36925:36930 Equiv Himp ::x_'::='_x not
R36937:36937 Equiv Himp ::x_'::='_x not
R36924:36924 Imp <> X def
R36931:36934 Imp <> ANum constr
R36944:36949 Equiv Himp ::x_'::='_x not
R36956:36956 Equiv Himp ::x_'::='_x not
R36943:36943 Imp <> Z def
R36950:36953 Imp <> ANum constr
prf 36968:36980 Himp p3_p4_inequiv
R36984:36985 Coq.Init.Logic <> :type_scope:'~'_x not
R36986:36991 Equiv Himp cequiv def
R36996:36997 Equiv Himp p4 def
R36993:36994 Equiv Himp p3 def
R37023:37028 Equiv Himp cequiv def
R37133:37141 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R37047:37047 Equiv Himp ::x_'/'_x_'||'_x not
R37070:37071 Equiv Himp ::x_'/'_x_'||'_x not
R37045:37046 Equiv Himp p3 def
R37048:37053 Imp <> update def
R37067:37067 Imp <> X def
R37055:37065 Imp <> empty_state def
R37072:37077 Imp <> update def
R37130:37130 Imp <> Z def
R37080:37085 Imp <> update def
R37125:37125 Imp <> X def
R37088:37093 Imp <> update def
R37120:37120 Imp <> Z def
R37096:37101 Imp <> update def
R37115:37115 Imp <> X def
R37103:37113 Imp <> empty_state def
R37144:37144 Equiv Himp ::x_'/'_x_'||'_x not
R37167:37168 Equiv Himp ::x_'/'_x_'||'_x not
R37142:37143 Equiv Himp p4 def
R37145:37150 Imp <> update def
R37164:37164 Imp <> X def
R37152:37162 Imp <> empty_state def
R37169:37174 Imp <> update def
R37227:37227 Imp <> Z def
R37177:37182 Imp <> update def
R37222:37222 Imp <> X def
R37185:37190 Imp <> update def
R37217:37217 Imp <> Z def
R37193:37198 Imp <> update def
R37212:37212 Imp <> X def
R37200:37210 Imp <> empty_state def
R37133:37141 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R37047:37047 Equiv Himp ::x_'/'_x_'||'_x not
R37070:37071 Equiv Himp ::x_'/'_x_'||'_x not
R37045:37046 Equiv Himp p3 def
R37048:37053 Imp <> update def
R37067:37067 Imp <> X def
R37055:37065 Imp <> empty_state def
R37072:37077 Imp <> update def
R37130:37130 Imp <> Z def
R37080:37085 Imp <> update def
R37125:37125 Imp <> X def
R37088:37093 Imp <> update def
R37120:37120 Imp <> Z def
R37096:37101 Imp <> update def
R37115:37115 Imp <> X def
R37103:37113 Imp <> empty_state def
R37144:37144 Equiv Himp ::x_'/'_x_'||'_x not
R37167:37168 Equiv Himp ::x_'/'_x_'||'_x not
R37142:37143 Equiv Himp p4 def
R37145:37150 Imp <> update def
R37164:37164 Imp <> X def
R37152:37162 Imp <> empty_state def
R37169:37174 Imp <> update def
R37227:37227 Imp <> Z def
R37177:37182 Imp <> update def
R37222:37222 Imp <> X def
R37185:37190 Imp <> update def
R37217:37217 Imp <> Z def
R37193:37198 Imp <> update def
R37212:37212 Imp <> X def
R37200:37210 Imp <> empty_state def
R37297:37299 Equiv Himp ::x_'/'_x_'||'_x not
R37322:37325 Equiv Himp ::x_'/'_x_'||'_x not
R37295:37296 Equiv Himp p3 def
R37300:37305 Imp <> update def
R37319:37319 Imp <> X def
R37307:37317 Imp <> empty_state def
R37326:37331 Imp <> update def
R37384:37384 Imp <> Z def
R37334:37339 Imp <> update def
R37379:37379 Imp <> X def
R37342:37347 Imp <> update def
R37374:37374 Imp <> Z def
R37350:37355 Imp <> update def
R37369:37369 Imp <> X def
R37357:37367 Imp <> empty_state def
R37297:37299 Equiv Himp ::x_'/'_x_'||'_x not
R37322:37325 Equiv Himp ::x_'/'_x_'||'_x not
R37295:37296 Equiv Himp p3 def
R37300:37305 Imp <> update def
R37319:37319 Imp <> X def
R37307:37317 Imp <> empty_state def
R37326:37331 Imp <> update def
R37384:37384 Imp <> Z def
R37334:37339 Imp <> update def
R37379:37379 Imp <> X def
R37342:37347 Imp <> update def
R37374:37374 Imp <> Z def
R37350:37355 Imp <> update def
R37369:37369 Imp <> X def
R37357:37367 Imp <> empty_state def
R37410:37415 Imp <> update def
R37442:37442 Imp <> Z def
R37418:37423 Imp <> update def
R37437:37437 Imp <> X def
R37425:37435 Imp <> empty_state def
R37398:37402 Equiv Himp E_Seq constr
R37410:37415 Imp <> update def
R37442:37442 Imp <> Z def
R37418:37423 Imp <> update def
R37437:37437 Imp <> X def
R37425:37435 Imp <> empty_state def
R37398:37402 Equiv Himp E_Seq constr
R37458:37462 Equiv Himp E_Ass constr
R37458:37462 Equiv Himp E_Ass constr
R37499:37504 Imp <> update def
R37557:37557 Imp <> Z def
R37507:37512 Imp <> update def
R37552:37552 Imp <> X def
R37515:37520 Imp <> update def
R37547:37547 Imp <> Z def
R37523:37528 Imp <> update def
R37542:37542 Imp <> X def
R37530:37540 Imp <> empty_state def
R37481:37491 Equiv Himp E_WhileLoop constr
R37499:37504 Imp <> update def
R37557:37557 Imp <> Z def
R37507:37512 Imp <> update def
R37552:37552 Imp <> X def
R37515:37520 Imp <> update def
R37547:37547 Imp <> Z def
R37523:37528 Imp <> update def
R37542:37542 Imp <> X def
R37530:37540 Imp <> empty_state def
R37481:37491 Equiv Himp E_WhileLoop constr
R37602:37607 Imp <> update def
R37647:37647 Imp <> X def
R37610:37615 Imp <> update def
R37642:37642 Imp <> Z def
R37618:37623 Imp <> update def
R37637:37637 Imp <> X def
R37625:37635 Imp <> empty_state def
R37590:37594 Equiv Himp E_Seq constr
R37665:37671 Equiv Himp E_Havoc constr
R37602:37607 Imp <> update def
R37647:37647 Imp <> X def
R37610:37615 Imp <> update def
R37642:37642 Imp <> Z def
R37618:37623 Imp <> update def
R37637:37637 Imp <> X def
R37625:37635 Imp <> empty_state def
R37590:37594 Equiv Himp E_Seq constr
R37665:37671 Equiv Himp E_Havoc constr
R37665:37671 Equiv Himp E_Havoc constr
R37684:37693 Equiv Himp E_WhileEnd constr
R37684:37693 Equiv Himp E_WhileEnd constr
R37891:37897 Coq.Init.Logic <> :type_scope:x_'='_x not
R37841:37846 Imp <> update def
R37890:37890 Imp <> Z def
R37886:37886 Imp <> Z def
R37849:37854 Imp <> update def
R37881:37881 Imp <> X def
R37857:37862 Imp <> update def
R37876:37876 Imp <> X def
R37864:37874 Imp <> empty_state def
R37898:37903 Imp <> update def
R37960:37960 Imp <> Z def
R37956:37956 Imp <> Z def
R37906:37911 Imp <> update def
R37951:37951 Imp <> X def
R37914:37919 Imp <> update def
R37946:37946 Imp <> Z def
R37922:37927 Imp <> update def
R37941:37941 Imp <> X def
R37929:37939 Imp <> empty_state def
R37891:37897 Coq.Init.Logic <> :type_scope:x_'='_x not
R37841:37846 Imp <> update def
R37890:37890 Imp <> Z def
R37886:37886 Imp <> Z def
R37849:37854 Imp <> update def
R37881:37881 Imp <> X def
R37857:37862 Imp <> update def
R37876:37876 Imp <> X def
R37864:37874 Imp <> empty_state def
R37898:37903 Imp <> update def
R37960:37960 Imp <> Z def
R37956:37956 Imp <> Z def
R37906:37911 Imp <> update def
R37951:37951 Imp <> X def
R37914:37919 Imp <> update def
R37946:37946 Imp <> Z def
R37922:37927 Imp <> update def
R37941:37941 Imp <> X def
R37929:37939 Imp <> empty_state def
R37994:38002 Imp <> update_eq thm
R37994:38002 Imp <> update_eq thm
R38019:38027 Imp <> update_eq thm
R38019:38027 Imp <> update_eq thm
def 38071:38072 Himp p5
R38076:38078 Equiv Himp com ind
R38085:38091 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R38119:38127 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R38135:38140 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R38092:38095 Imp <> BNot constr
R38098:38100 Imp <> BEq constr
R38111:38114 Imp <> ANum constr
R38103:38105 Imp <> AId constr
R38107:38107 Imp <> X def
R38128:38133 Equiv Himp ::'HAVOC'_x not
R38134:38134 Imp <> X def
def 38155:38156 Himp p6
R38160:38162 Equiv Himp com ind
R38170:38174 Equiv Himp ::x_'::='_x not
R38169:38169 Imp <> X def
R38175:38178 Imp <> ANum constr
prf 38192:38202 Himp p5_p6_equiv
R38206:38211 Equiv Himp cequiv def
R38216:38217 Equiv Himp p6 def
R38213:38214 Equiv Himp p5 def
R38251:38252 Equiv Himp p5 def
R38262:38263 Equiv Himp p6 def
R38295:38300 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R38328:38337 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R38345:38348 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R38301:38304 Imp <> BNot constr
R38307:38309 Imp <> BEq constr
R38320:38323 Imp <> ANum constr
R38312:38314 Imp <> AId constr
R38316:38316 Imp <> X def
R38338:38343 Equiv Himp ::'HAVOC'_x not
R38344:38344 Imp <> X def
R38295:38300 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R38328:38337 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R38345:38348 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R38301:38304 Imp <> BNot constr
R38307:38309 Imp <> BEq constr
R38320:38323 Imp <> ANum constr
R38312:38314 Imp <> AId constr
R38316:38316 Imp <> X def
R38338:38343 Equiv Himp ::'HAVOC'_x not
R38344:38344 Imp <> X def
R38434:38437 Coq.Init.Datatypes <> negb def
R38456:38462 Coq.Arith.EqNat <> beq_nat def
R38468:38468 Imp <> X def
R38456:38462 Coq.Arith.EqNat <> beq_nat def
R38468:38468 Imp <> X def
R38494:38496 Coq.Init.Logic <> :type_scope:x_'='_x not
R38497:38502 Imp <> update def
R38507:38507 Imp <> X def
R38494:38496 Coq.Init.Logic <> :type_scope:x_'='_x not
R38497:38502 Imp <> update def
R38507:38507 Imp <> X def
R38523:38547 Equiv Himp functional_extensionality prfax
R38523:38547 Equiv Himp functional_extensionality prfax
R38581:38581 Imp <> X def
R38581:38581 Imp <> X def
R38605:38615 Imp <> update_same thm
R38605:38615 Imp <> update_same thm
R38641:38641 Imp <> X def
R38641:38641 Imp <> X def
R38746:38746 Equiv Himp ::x_'/'_x_'||'_x not
R38759:38762 Equiv Himp ::x_'/'_x_'||'_x not
R38765:38768 Equiv Himp ::x_'/'_x_'||'_x not
R38748:38752 Equiv Himp ::x_'::='_x not
R38747:38747 Imp <> X def
R38753:38756 Imp <> ANum constr
R38706:38706 Equiv Himp ::x_'/'_x_'||'_x not
R38719:38722 Equiv Himp ::x_'/'_x_'||'_x not
R38725:38728 Equiv Himp ::x_'/'_x_'||'_x not
R38708:38712 Equiv Himp ::x_'::='_x not
R38707:38707 Imp <> X def
R38713:38716 Imp <> ANum constr
R38729:38734 Imp <> update def
R38739:38739 Imp <> X def
R38746:38746 Equiv Himp ::x_'/'_x_'||'_x not
R38759:38762 Equiv Himp ::x_'/'_x_'||'_x not
R38765:38768 Equiv Himp ::x_'/'_x_'||'_x not
R38748:38752 Equiv Himp ::x_'::='_x not
R38747:38747 Imp <> X def
R38753:38756 Imp <> ANum constr
R38706:38706 Equiv Himp ::x_'/'_x_'||'_x not
R38719:38722 Equiv Himp ::x_'/'_x_'||'_x not
R38725:38728 Equiv Himp ::x_'/'_x_'||'_x not
R38708:38712 Equiv Himp ::x_'::='_x not
R38707:38707 Imp <> X def
R38713:38716 Imp <> ANum constr
R38729:38734 Imp <> update def
R38739:38739 Imp <> X def
R38813:38817 Equiv Himp E_Ass constr
R38813:38817 Equiv Himp E_Ass constr
R38851:38851 Equiv Himp ::x_'/'_x_'||'_x not
R38864:38867 Equiv Himp ::x_'/'_x_'||'_x not
R38871:38874 Equiv Himp ::x_'/'_x_'||'_x not
R38853:38857 Equiv Himp ::x_'::='_x not
R38852:38852 Imp <> X def
R38858:38861 Imp <> ANum constr
R38851:38851 Equiv Himp ::x_'/'_x_'||'_x not
R38864:38867 Equiv Himp ::x_'/'_x_'||'_x not
R38871:38874 Equiv Himp ::x_'/'_x_'||'_x not
R38853:38857 Equiv Himp ::x_'::='_x not
R38852:38852 Imp <> X def
R38858:38861 Imp <> ANum constr
R39017:39019 Coq.Init.Logic <> :type_scope:x_'='_x not
R38991:38996 Imp <> update def
R39014:39014 Imp <> X def
R38999:39004 Imp <> update def
R39009:39009 Imp <> X def
R39020:39025 Imp <> update def
R39030:39030 Imp <> X def
R39017:39019 Coq.Init.Logic <> :type_scope:x_'='_x not
R38991:38996 Imp <> update def
R39014:39014 Imp <> X def
R38999:39004 Imp <> update def
R39009:39009 Imp <> X def
R39020:39025 Imp <> update def
R39030:39030 Imp <> X def
R39046:39070 Equiv Himp functional_extensionality prfax
R39046:39070 Equiv Himp functional_extensionality prfax
R39095:39103 SfLib <> eq_id_dec thm
R39105:39105 Imp <> X def
R39095:39103 SfLib <> eq_id_dec thm
R39105:39105 Imp <> X def
R39139:39147 Imp <> update_eq thm
R39139:39147 Imp <> update_eq thm
R39164:39173 Imp <> update_neq thm
R39164:39173 Imp <> update_neq thm
R39196:39205 Imp <> update_neq thm
R39196:39205 Imp <> update_neq thm
R39228:39237 Imp <> update_neq thm
R39228:39237 Imp <> update_neq thm
R39272:39276 Equiv Himp E_Ass constr
R39272:39276 Equiv Himp E_Ass constr
R39345:39345 Imp <> X def
R39345:39345 Imp <> X def
R39396:39401 Imp <> update def
R39406:39406 Imp <> X def
R39378:39388 Equiv Himp E_WhileLoop constr
R39396:39401 Imp <> update def
R39406:39406 Imp <> X def
R39378:39388 Equiv Himp E_WhileLoop constr
R39458:39464 Equiv Himp E_Havoc constr
R39458:39464 Equiv Himp E_Havoc constr
R39477:39486 Equiv Himp E_WhileEnd constr
R39477:39486 Equiv Himp E_WhileEnd constr
R39534:39539 Imp <> update def
R39544:39544 Imp <> X def
R39534:39539 Imp <> update def
R39544:39544 Imp <> X def
R39566:39575 Equiv Himp E_WhileEnd constr
R39566:39575 Equiv Himp E_WhileEnd constr
R39618:39642 Equiv Himp functional_extensionality prfax
R39618:39642 Equiv Himp functional_extensionality prfax
R39665:39673 SfLib <> eq_id_dec thm
R39675:39675 Imp <> X def
R39665:39673 SfLib <> eq_id_dec thm
R39675:39675 Imp <> X def
R39709:39717 Imp <> update_eq thm
R39709:39717 Imp <> update_eq thm
R39738:39747 Imp <> update_neq thm
R39738:39747 Imp <> update_neq thm
R39782:39787 Imp <> update def
R39792:39792 Imp <> X def
R39764:39774 Equiv Himp E_WhileLoop constr
R39782:39787 Imp <> update def
R39792:39792 Imp <> X def
R39764:39774 Equiv Himp E_WhileLoop constr
R39844:39850 Equiv Himp E_Havoc constr
R39844:39850 Equiv Himp E_Havoc constr
R39863:39872 Equiv Himp E_WhileEnd constr
R39863:39872 Equiv Himp E_WhileEnd constr
R39900:39903 Equiv <> <> mod
def 39918:39924 <> stequiv
R39937:39941 Imp <> state def
R39966:39967 SfLib <> id ind
R39976:39978 Coq.Init.Logic <> :type_scope:x_'='_x not
R39971:39973 Equiv <> st1 var
R39975:39975 Equiv <> X var
R39979:39981 Equiv <> st2 var
R39983:39983 Equiv <> X var
R40014:40020 Equiv <> stequiv def
not 39996 <> ::x_'~'_x
prf 40053:40064 <> stequiv_refl
R40081:40085 Imp <> state def
R40093:40095 Equiv <> ::x_'~'_x not
R40091:40092 Equiv <> st var
R40096:40097 Equiv <> st var
prf 40144:40154 <> stequiv_sym
R40176:40180 Imp <> state def
R40204:40206 Equiv <> ::x_'~'_x not
R40201:40203 Equiv <> st2 var
R40207:40209 Equiv <> st1 var
R40189:40191 Equiv <> ::x_'~'_x not
R40186:40188 Equiv <> st1 var
R40192:40194 Equiv <> st2 var
prf 40269:40281 <> stequiv_trans
R40307:40311 Imp <> state def
R40350:40352 Equiv <> ::x_'~'_x not
R40347:40349 Equiv <> st1 var
R40353:40355 Equiv <> st3 var
R40335:40337 Equiv <> ::x_'~'_x not
R40332:40334 Equiv <> st2 var
R40338:40340 Equiv <> st3 var
R40320:40322 Equiv <> ::x_'~'_x not
R40317:40319 Equiv <> st1 var
R40323:40325 Equiv <> st2 var
prf 40417:40430 <> stequiv_update
R40452:40456 Imp <> state def
R40487:40488 SfLib <> id ind
R40494:40496 Coq.Init.Datatypes <> nat ind
R40516:40518 Equiv <> ::x_'~'_x not
R40502:40507 Imp <> update def
R40515:40515 Equiv <> n var
R40513:40513 Equiv <> X var
R40509:40511 Equiv <> st1 var
R40519:40524 Imp <> update def
R40532:40532 Equiv <> n var
R40530:40530 Equiv <> X var
R40526:40528 Equiv <> st2 var
R40465:40467 Equiv <> ::x_'~'_x not
R40462:40464 Equiv <> st1 var
R40468:40470 Equiv <> st2 var
R40574:40582 SfLib <> eq_id_dec thm
R40574:40582 SfLib <> eq_id_dec thm
R40616:40624 Imp <> update_eq thm
R40616:40624 Imp <> update_eq thm
R40635:40643 Imp <> update_eq thm
R40635:40643 Imp <> update_eq thm
R40664:40673 Imp <> update_neq thm
R40664:40673 Imp <> update_neq thm
R40690:40699 Imp <> update_neq thm
R40690:40699 Imp <> update_neq thm
prf 40722:40734 <> stequiv_aeval
R40756:40760 Imp <> state def
R40791:40794 Imp <> aexp ind
R40809:40811 Coq.Init.Logic <> :type_scope:x_'='_x not
R40798:40802 Imp <> aeval def
R40808:40808 Equiv <> a var
R40804:40806 Equiv <> st1 var
R40812:40816 Imp <> aeval def
R40822:40822 Equiv <> a var
R40818:40820 Equiv <> st2 var
R40769:40771 Equiv <> ::x_'~'_x not
R40766:40768 Equiv <> st1 var
R40772:40774 Equiv <> st2 var
prf 40884:40896 <> stequiv_beval
R40918:40922 Imp <> state def
R40953:40956 Imp <> bexp ind
R40971:40973 Coq.Init.Logic <> :type_scope:x_'='_x not
R40960:40964 Imp <> beval def
R40970:40970 Equiv <> b var
R40966:40968 Equiv <> st1 var
R40974:40978 Imp <> beval def
R40984:40984 Equiv <> b var
R40980:40982 Equiv <> st2 var
R40931:40933 Equiv <> ::x_'~'_x not
R40928:40930 Equiv <> st1 var
R40934:40936 Equiv <> st2 var
R41044:41056 Equiv <> stequiv_aeval thm
R41095:41107 Equiv <> stequiv_aeval thm
R41044:41056 Equiv <> stequiv_aeval thm
R41044:41056 Equiv <> stequiv_aeval thm
R41044:41056 Equiv <> stequiv_aeval thm
R41044:41056 Equiv <> stequiv_aeval thm
R41095:41107 Equiv <> stequiv_aeval thm
R41095:41107 Equiv <> stequiv_aeval thm
R41095:41107 Equiv <> stequiv_aeval thm
R41095:41107 Equiv <> stequiv_aeval thm
prf 41214:41226 <> stequiv_ceval
R41247:41251 Imp <> state def
R41283:41285 Imp <> com ind
R41295:41299 Imp <> state def
R41332:41338 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R41351:41357 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R41390:41390 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R41346:41350 Imp <> state def
R41358:41358 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R41374:41378 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R41360:41362 Imp <> ::x_'/'_x_'||'_x not
R41366:41369 Imp <> ::x_'/'_x_'||'_x not
R41359:41359 Equiv <> c var
R41363:41365 Equiv <> st2 var
R41370:41373 Equiv <> st2' var
R41383:41385 Equiv <> ::x_'~'_x not
R41379:41382 Equiv <> st1' var
R41386:41389 Equiv <> st2' var
R41309:41311 Imp <> ::x_'/'_x_'||'_x not
R41315:41318 Imp <> ::x_'/'_x_'||'_x not
R41308:41308 Equiv <> c var
R41312:41314 Equiv <> st1 var
R41319:41322 Equiv <> st1' var
R41260:41262 Equiv <> ::x_'~'_x not
R41257:41259 Equiv <> st1 var
R41263:41265 Equiv <> st2 var
R41598:41603 Imp <> update def
R41598:41603 Imp <> update def
R41672:41684 Equiv <> stequiv_aeval thm
R41672:41684 Equiv <> stequiv_aeval thm
R41712:41725 Equiv <> stequiv_update thm
R41712:41725 Equiv <> stequiv_update thm
R41900:41904 Imp <> E_Seq constr
R41900:41904 Imp <> E_Seq constr
R42051:42058 Imp <> E_IfTrue constr
R42051:42058 Imp <> E_IfTrue constr
R42091:42103 Equiv <> stequiv_beval thm
R42091:42103 Equiv <> stequiv_beval thm
R42252:42260 Imp <> E_IfFalse constr
R42252:42260 Imp <> E_IfFalse constr
R42293:42305 Equiv <> stequiv_beval thm
R42293:42305 Equiv <> stequiv_beval thm
R42403:42412 Imp <> E_WhileEnd constr
R42403:42412 Imp <> E_WhileEnd constr
R42445:42457 Equiv <> stequiv_beval thm
R42445:42457 Equiv <> stequiv_beval thm
R42658:42668 Imp <> E_WhileLoop constr
R42658:42668 Imp <> E_WhileLoop constr
R42717:42729 Equiv <> stequiv_beval thm
R42717:42729 Equiv <> stequiv_beval thm
ind 42874:42879 <> ceval'
constr 42920:42926 <> E_equiv
R42899:42903 Imp <> state def
R42890:42894 Imp <> state def
R42883:42885 Imp <> com ind
R43045:43050 Equiv <> ceval' ind
R42996:42998 Equiv <> ::x_'/'_x_'||'''_x not
R43001:43005 Equiv <> ::x_'/'_x_'||'''_x not
R42995:42995 Equiv <> c var
R42999:43000 Equiv <> st var
R43006:43009 Equiv <> st'' var
R42980:42982 Equiv <> ::x_'~'_x not
R42977:42979 Equiv <> st' var
R42983:42986 Equiv <> st'' var
R42957:42959 Imp <> ::x_'/'_x_'||'_x not
R42962:42965 Imp <> ::x_'/'_x_'||'_x not
R42956:42956 Equiv <> c var
R42960:42961 Equiv <> st var
R42966:42968 Equiv <> st' var
R43045:43050 Equiv <> ceval' ind
not 43019 <> ::x_'/'_x_'||'''_x
def 43076:43082 <> cequiv'
R43093:43095 Imp <> com ind
R43127:43131 Imp <> state def
R43139:43139 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R43155:43161 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R43177:43177 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R43142:43144 Equiv <> ::x_'/'_x_'||'''_x not
R43147:43151 Equiv <> ::x_'/'_x_'||'''_x not
R43140:43141 Equiv <> c1 var
R43145:43146 Equiv <> st var
R43152:43154 Equiv <> st' var
R43164:43166 Equiv <> ::x_'/'_x_'||'''_x not
R43169:43173 Equiv <> ::x_'/'_x_'||'''_x not
R43162:43163 Equiv <> c2 var
R43167:43168 Equiv <> st var
R43174:43176 Equiv <> st' var
prf 43187:43201 <> cequiv__cequiv'
R43220:43222 Imp <> com ind
R43244:43250 Equiv <> cequiv' def
R43255:43256 Equiv <> c2 var
R43252:43253 Equiv <> c1 var
R43228:43233 Equiv <> cequiv def
R43238:43239 Equiv <> c2 var
R43235:43236 Equiv <> c1 var
R43275:43280 Equiv <> cequiv def
R43283:43289 Equiv <> cequiv' def
R43339:43345 Equiv <> E_equiv constr
R43339:43345 Equiv <> E_equiv constr
R43437:43443 Equiv <> E_equiv constr
R43437:43443 Equiv <> E_equiv constr
def 43517:43536 <> identity_assignment'
R43542:43548 Equiv <> cequiv' def
R43557:43561 Imp <> ::x_'::='_x not
R43556:43556 Imp <> X def
R43562:43564 Imp <> AId constr
R43566:43566 Imp <> X def
R43550:43553 Imp <> ::'SKIP' not
R43588:43594 Equiv <> cequiv' def
R43717:43722 Imp <> update def
R43737:43737 Imp <> X def
R43729:43729 Imp <> X def
R43703:43709 Equiv <> E_equiv constr
R43717:43722 Imp <> update def
R43737:43737 Imp <> X def
R43729:43729 Imp <> X def
R43703:43709 Equiv <> E_equiv constr
R43780:43792 Equiv <> stequiv_trans thm
R43780:43792 Equiv <> stequiv_trans thm
R43818:43824 Equiv <> stequiv def
R43841:43851 Imp <> update_same thm
R43841:43851 Imp <> update_same thm
R43947:43953 Equiv <> E_equiv constr
R43947:43953 Equiv <> E_equiv constr
R44005:44023 Equiv <> identity_assignment thm
R44005:44023 Equiv <> identity_assignment thm
prf 44044:44063 <> for_while_skip_equiv
R44092:44092 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R44133:44141 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R44181:44181 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R44093:44093 Imp <> ::x_'/f'_x_'||'_x not
R44119:44123 Imp <> ::x_'/f'_x_'||'_x not
R44126:44129 Imp <> ::x_'/f'_x_'||'_x not
R44094:44097 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44103:44103 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44105:44105 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44108:44112 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44115:44118 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44098:44102 Imp <> ::'FSKIP' not
R44104:44104 Equiv <> b var
R44106:44107 Equiv <> c2 var
R44113:44114 Equiv <> c3 var
R44124:44125 Equiv <> st var
R44130:44132 Equiv <> st' var
R44142:44142 Imp <> ::x_'/f'_x_'||'_x not
R44167:44171 Imp <> ::x_'/f'_x_'||'_x not
R44174:44177 Imp <> ::x_'/f'_x_'||'_x not
R44143:44149 Imp <> ::'WHILEF'_x_'DO'_x_'END' not
R44151:44154 Imp <> ::'WHILEF'_x_'DO'_x_'END' not
R44163:44166 Imp <> ::'WHILEF'_x_'DO'_x_'END' not
R44150:44150 Equiv <> b var
R44157:44160 Imp <> ::x_'F;'_x not
R44155:44156 Equiv <> c3 var
R44161:44162 Equiv <> c2 var
R44172:44173 Equiv <> st var
R44178:44180 Equiv <> st' var
R44220:44225 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44231:44232 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44234:44235 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44238:44241 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44244:44247 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44226:44230 Imp <> ::'FSKIP' not
R44220:44225 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44231:44232 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44234:44235 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44238:44241 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44244:44247 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44226:44230 Imp <> ::'FSKIP' not
R44336:44345 Imp <> F_WhileEnd constr
R44336:44345 Imp <> F_WhileEnd constr
R44384:44394 Imp <> F_WhileLoop constr
R44384:44394 Imp <> F_WhileLoop constr
R44425:44431 Imp <> ::'WHILEF'_x_'DO'_x_'END' not
R44433:44436 Imp <> ::'WHILEF'_x_'DO'_x_'END' not
R44445:44448 Imp <> ::'WHILEF'_x_'DO'_x_'END' not
R44439:44442 Imp <> ::x_'F;'_x not
R44425:44431 Imp <> ::'WHILEF'_x_'DO'_x_'END' not
R44433:44436 Imp <> ::'WHILEF'_x_'DO'_x_'END' not
R44445:44448 Imp <> ::'WHILEF'_x_'DO'_x_'END' not
R44439:44442 Imp <> ::x_'F;'_x not
R44522:44529 Imp <> F_ForEnd constr
R44522:44529 Imp <> F_ForEnd constr
R44563:44571 Imp <> F_ForLoop constr
R44596:44601 Imp <> F_Skip constr
R44563:44571 Imp <> F_ForLoop constr
R44596:44601 Imp <> F_Skip constr
R44596:44601 Imp <> F_Skip constr
R44596:44601 Imp <> F_Skip constr
R44596:44601 Imp <> F_Skip constr
prf 44633:44647 <> for_while_equiv
R44679:44679 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R44717:44725 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R44771:44771 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R44680:44680 Imp <> ::x_'/f'_x_'||'_x not
R44703:44707 Imp <> ::x_'/f'_x_'||'_x not
R44710:44713 Imp <> ::x_'/f'_x_'||'_x not
R44681:44684 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44687:44687 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44689:44689 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44692:44696 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44699:44702 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44685:44686 Equiv <> c1 var
R44688:44688 Equiv <> b var
R44690:44691 Equiv <> c2 var
R44697:44698 Equiv <> c3 var
R44708:44709 Equiv <> st var
R44714:44716 Equiv <> st' var
R44726:44726 Imp <> ::x_'/f'_x_'||'_x not
R44757:44761 Imp <> ::x_'/f'_x_'||'_x not
R44764:44767 Imp <> ::x_'/f'_x_'||'_x not
R44729:44732 Imp <> ::x_'F;'_x not
R44727:44728 Equiv <> c1 var
R44733:44739 Imp <> ::'WHILEF'_x_'DO'_x_'END' not
R44741:44744 Imp <> ::'WHILEF'_x_'DO'_x_'END' not
R44753:44756 Imp <> ::'WHILEF'_x_'DO'_x_'END' not
R44740:44740 Equiv <> b var
R44747:44750 Imp <> ::x_'F;'_x not
R44745:44746 Equiv <> c3 var
R44751:44752 Equiv <> c2 var
R44762:44763 Equiv <> st var
R44768:44770 Equiv <> st' var
R44830:44835 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44838:44839 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44841:44842 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44845:44848 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44851:44854 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44830:44835 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44838:44839 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44841:44842 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44845:44848 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44851:44854 Imp <> ::'FOR'_'('_x_','_x_','_x_')'_'DO'_x_'END' not
R44924:44928 Imp <> F_Seq constr
R44924:44928 Imp <> F_Seq constr
R44963:44972 Imp <> F_WhileEnd constr
R44963:44972 Imp <> F_WhileEnd constr
R44989:44993 Imp <> F_Seq constr
R44989:44993 Imp <> F_Seq constr
R45028:45038 Imp <> F_WhileLoop constr
R45028:45038 Imp <> F_WhileLoop constr
R45067:45086 Equiv <> for_while_skip_equiv thm
R45067:45086 Equiv <> for_while_skip_equiv thm
R45137:45143 Imp <> ::'WHILEF'_x_'DO'_x_'END' not
R45145:45148 Imp <> ::'WHILEF'_x_'DO'_x_'END' not
R45157:45160 Imp <> ::'WHILEF'_x_'DO'_x_'END' not
R45151:45154 Imp <> ::x_'F;'_x not
R45137:45143 Imp <> ::'WHILEF'_x_'DO'_x_'END' not
R45145:45148 Imp <> ::'WHILEF'_x_'DO'_x_'END' not
R45157:45160 Imp <> ::'WHILEF'_x_'DO'_x_'END' not
R45151:45154 Imp <> ::x_'F;'_x not
R45238:45245 Imp <> F_ForEnd constr
R45238:45245 Imp <> F_ForEnd constr
R45264:45272 Imp <> F_ForLoop constr
R45264:45272 Imp <> F_ForLoop constr
R45308:45327 Equiv <> for_while_skip_equiv thm
R45308:45327 Equiv <> for_while_skip_equiv thm
prf 45352:45382 <> swap_noninterfering_assignments
R45485:45490 Equiv <> cequiv def
R45534:45536 Imp <> ::x_';;'_x not
R45527:45531 Imp <> ::x_'::='_x not
R45525:45526 Equiv <> l2 var
R45532:45533 Equiv <> a2 var
R45539:45543 Imp <> ::x_'::='_x not
R45537:45538 Equiv <> l1 var
R45544:45545 Equiv <> a1 var
R45506:45508 Imp <> ::x_';;'_x not
R45499:45503 Imp <> ::x_'::='_x not
R45497:45498 Equiv <> l1 var
R45504:45505 Equiv <> a1 var
R45511:45515 Imp <> ::x_'::='_x not
R45509:45510 Equiv <> l2 var
R45516:45517 Equiv <> a2 var
R45453:45472 Equiv <> var_not_used_in_aexp ind
R45477:45478 Equiv <> a1 var
R45474:45475 Equiv <> l2 var
R45421:45440 Equiv <> var_not_used_in_aexp ind
R45445:45446 Equiv <> a2 var
R45442:45443 Equiv <> l1 var
R45409:45412 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R45407:45408 Equiv <> l1 var
R45413:45414 Equiv <> l2 var
R45679:45689 Coq.Init.Logic <> :type_scope:x_'='_x not
R45596:45601 Imp <> update def
R45641:45645 Imp <> aeval def
R45648:45653 Imp <> update def
R45662:45666 Imp <> aeval def
R45668:45669 Equiv <> st var
R45655:45656 Equiv <> st var
R45604:45609 Imp <> update def
R45618:45622 Imp <> aeval def
R45624:45625 Equiv <> st var
R45611:45612 Equiv <> st var
R45690:45695 Imp <> update def
R45735:45739 Imp <> aeval def
R45742:45747 Imp <> update def
R45756:45760 Imp <> aeval def
R45762:45763 Equiv <> st var
R45749:45750 Equiv <> st var
R45698:45703 Imp <> update def
R45712:45716 Imp <> aeval def
R45718:45719 Equiv <> st var
R45705:45706 Equiv <> st var
R45679:45689 Coq.Init.Logic <> :type_scope:x_'='_x not
R45596:45601 Imp <> update def
R45641:45645 Imp <> aeval def
R45648:45653 Imp <> update def
R45662:45666 Imp <> aeval def
R45668:45669 Equiv <> st var
R45655:45656 Equiv <> st var
R45604:45609 Imp <> update def
R45618:45622 Imp <> aeval def
R45624:45625 Equiv <> st var
R45611:45612 Equiv <> st var
R45690:45695 Imp <> update def
R45735:45739 Imp <> aeval def
R45742:45747 Imp <> update def
R45756:45760 Imp <> aeval def
R45762:45763 Equiv <> st var
R45749:45750 Equiv <> st var
R45698:45703 Imp <> update def
R45712:45716 Imp <> aeval def
R45718:45719 Equiv <> st var
R45705:45706 Equiv <> st var
R45792:45816 Equiv <> functional_extensionality prfax
R45792:45816 Equiv <> functional_extensionality prfax
R45842:45850 SfLib <> eq_id_dec thm
R45842:45850 SfLib <> eq_id_dec thm
R45879:45888 Imp <> update_neq thm
R45879:45888 Imp <> update_neq thm
R45916:45924 Imp <> update_eq thm
R45916:45924 Imp <> update_eq thm
R45935:45943 Imp <> update_eq thm
R45935:45943 Imp <> update_eq thm
R45958:45972 Equiv <> aeval_weakening thm
R45958:45972 Equiv <> aeval_weakening thm
R45995:46003 SfLib <> eq_id_dec thm
R45995:46003 SfLib <> eq_id_dec thm
R46039:46047 Imp <> update_eq thm
R46039:46047 Imp <> update_eq thm
R46058:46072 Equiv <> aeval_weakening thm
R46058:46072 Equiv <> aeval_weakening thm
R46093:46102 Imp <> update_neq thm
R46093:46102 Imp <> update_neq thm
R46119:46127 Imp <> update_eq thm
R46119:46127 Imp <> update_eq thm
R46155:46164 Imp <> update_neq thm
R46155:46164 Imp <> update_neq thm
R46155:46164 Imp <> update_neq thm
R46155:46164 Imp <> update_neq thm
R46155:46164 Imp <> update_neq thm
R46155:46164 Imp <> update_neq thm
R46155:46164 Imp <> update_neq thm
R46155:46164 Imp <> update_neq thm
R46155:46164 Imp <> update_neq thm
R46155:46164 Imp <> update_neq thm
R46291:46296 Imp <> update def
R46305:46309 Imp <> aeval def
R46279:46283 Imp <> E_Seq constr
R46328:46332 Imp <> E_Ass constr
R46291:46296 Imp <> update def
R46305:46309 Imp <> aeval def
R46279:46283 Imp <> E_Seq constr
R46328:46332 Imp <> E_Ass constr
R46328:46332 Imp <> E_Ass constr
R46381:46386 Imp <> update def
R46395:46399 Imp <> aeval def
R46369:46373 Imp <> E_Seq constr
R46418:46422 Imp <> E_Ass constr
R46381:46386 Imp <> update def
R46395:46399 Imp <> aeval def
R46369:46373 Imp <> E_Seq constr
R46418:46422 Imp <> E_Ass constr
R46418:46422 Imp <> E_Ass constr
